// Code generated by goyacc -o yacc/idl.go -p IdlExpr yacc/idl.y. DO NOT EDIT.

//line yacc/idl.y:2
package yacc

import __yyfmt__ "fmt"

//line yacc/idl.y:2
//go:generate goyacc -o idl.go -p "IdlExpr" idl.y
import (
	"github.com/bhbosman/CodeGenerators/mitchgenerator/MitchDefinedTypes"
	"github.com/bhbosman/CodeGenerators/mitchgenerator/interfaces"
)

//line yacc/idl.y:33
type IdlExprSymType struct {
	yys          int
	Identifier   string
	IntegerValue int64
	StringValue  string
	FloatValue   float64
	ConstValue   interfaces.IConstantValue
	BoolValue    bool

	Member                *Member
	Declarator            interfaces.IDeclarator
	DefinedType           interfaces.IDefinedType
	DefinitionDeclaration interfaces.IDefinitionDeclaration
	Specification         []interfaces.IDefinitionDeclaration
}

const Identifier = 57346
const Integer_literal = 57347
const Hex_literal = 57348
const Character_literal = 57349
const Scope = 57350
const Rwenum = 57351
const Rwstruct = 57352
const Rwtypedef = 57353
const RwMitchAlpha = 57354
const RwMitchBitField = 57355
const RwMitchByte = 57356
const RwMitchDate = 57357
const RwMitchTime = 57358
const RwMitchPrice04 = 57359
const RwMitchPrice08 = 57360
const RwMitchUInt08 = 57361
const RwMitchUInt16 = 57362
const RwMitchUInt32 = 57363
const RwMitchUInt64 = 57364

var IdlExprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"Identifier",
	"Integer_literal",
	"Hex_literal",
	"Character_literal",
	"Scope",
	"Rwenum",
	"Rwstruct",
	"Rwtypedef",
	"RwMitchAlpha",
	"RwMitchBitField",
	"RwMitchByte",
	"RwMitchDate",
	"RwMitchTime",
	"RwMitchPrice04",
	"RwMitchPrice08",
	"RwMitchUInt08",
	"RwMitchUInt16",
	"RwMitchUInt32",
	"RwMitchUInt64",
	"';'",
	"'-'",
	"'+'",
	"'~'",
	"'('",
	"')'",
	"'<'",
	"'>'",
	"','",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'='",
}
var IdlExprStatenames = [...]string{}

const IdlExprEofCode = 1
const IdlExprErrCode = 2
const IdlExprInitialStackSize = 16

//line yacc/idl.y:387

//line yacctab:1
var IdlExprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const IdlExprPrivate = 57344

const IdlExprLast = 205

var IdlExprAct = [...]int{

	38, 68, 87, 56, 67, 37, 20, 62, 47, 48,
	51, 85, 91, 83, 63, 82, 101, 96, 32, 32,
	58, 46, 59, 41, 42, 84, 22, 45, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 113, 111, 52,
	53, 54, 57, 55, 109, 65, 69, 106, 107, 70,
	55, 102, 64, 84, 83, 98, 60, 55, 81, 74,
	115, 75, 97, 80, 55, 35, 77, 76, 44, 78,
	55, 43, 79, 69, 88, 32, 58, 90, 59, 14,
	66, 55, 92, 89, 69, 69, 94, 5, 93, 95,
	36, 11, 12, 9, 99, 40, 73, 18, 57, 100,
	58, 34, 59, 105, 103, 32, 16, 61, 108, 39,
	110, 6, 112, 22, 114, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 3, 32, 15, 13, 8, 10,
	7, 4, 2, 22, 104, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 1, 32, 17, 21, 19, 72,
	50, 49, 0, 22, 86, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 0, 0, 0, 32, 0, 0,
	0, 0, 11, 12, 71, 22, 33, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 0, 0, 0,
	0, 0, 0, 0, 22, 0, 23, 24, 25, 26,
	27, 28, 29, 30, 31,
}
var IdlExprPact = [...]int{

	82, -1000, 82, -1000, 56, -1000, -1000, -1000, -1000, 163,
	-1000, 97, 61, -1000, -1000, -1000, 91, 91, 91, -1000,
	-1000, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 39, -5, -11, 15, 25, -1000, -1000,
	-20, 25, 25, 15, 76, 76, 141, 28, -1000, -1000,
	71, -1000, -1000, -1000, -1000, -1000, -1000, 15, -1000, -1000,
	91, -20, -1000, 15, 33, 27, -1000, -18, 22, -25,
	121, -1000, 76, -1000, 15, -1000, 49, 25, -1000, -23,
	-1000, 76, -1000, 76, 76, 95, -1000, 182, -6, 32,
	-1000, -1000, 24, 23, 22, -1000, -1000, 90, 76, -16,
	20, 101, 76, 14, -1000, 17, -1000, 76, 13, 76,
	7, 76, 6, 76, 30, -1000,
}
var IdlExprPgo = [...]int{

	0, 0, 3, 10, 8, 9, 151, 150, 2, 149,
	96, 148, 6, 147, 146, 144, 124, 132, 131, 130,
	129, 87, 128, 126, 111, 1, 5, 4, 109, 107,
	7,
}
var IdlExprR1 = [...]int{

	0, 15, 17, 17, 16, 12, 5, 6, 6, 7,
	7, 7, 3, 3, 3, 2, 2, 4, 18, 18,
	9, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 10, 10, 14, 13, 21, 21, 19, 20, 20,
	20, 20, 8, 8, 22, 27, 27, 28, 29, 29,
	30, 1, 24, 23, 23, 23, 26, 26, 26, 25,
	25, 25,
}
var IdlExprR2 = [...]int{

	0, 1, 1, 2, 2, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 18, 1, 1, 1, 5, 4,
	10, 9, 3, 2, 5, 1, 3, 2, 1, 2,
	3, 1, 2, 2, 2, 2, 1, 1, 3, 3,
	1, 3,
}
var IdlExprChk = [...]int{

	-1000, -15, -17, -16, -18, -21, -24, -19, -22, 11,
	-20, 9, 10, -16, 23, -23, -10, -14, -21, -11,
	-12, -13, 12, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 4, 13, 4, 4, 29, -26, -1, -28,
	4, -26, -26, 29, 29, 32, 32, -4, -5, -6,
	-7, -3, 24, 25, 26, -12, -2, 27, 5, 7,
	31, -29, -30, 34, -4, -1, 4, -27, -25, -1,
	-8, 33, -9, -10, 31, -3, -5, -26, -30, -4,
	30, 31, 33, 31, 31, 36, 33, -8, -25, -4,
	28, 35, -1, -27, -25, -2, 23, 30, 31, 4,
	-1, 32, 31, -8, 33, -1, 33, 31, -1, 31,
	-1, 31, -1, 31, -1, 30,
}
var IdlExprDef = [...]int{

	0, -2, 1, 2, 0, 18, 19, 35, 36, 0,
	37, 0, 0, 3, 4, 52, 0, 0, 0, 31,
	32, 33, 0, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 5, 0, 0, 0, 0, 53, 56, 57,
	51, 54, 55, 0, 0, 0, 0, 0, 17, 6,
	0, 8, 9, 10, 11, 12, 13, 0, 15, 16,
	0, 47, 48, 0, 0, 0, 51, 0, 45, 60,
	0, 39, 0, 20, 0, 7, 0, 58, 49, 0,
	21, 0, 44, 0, 0, 0, 38, 43, 0, 0,
	14, 50, 0, 46, 61, 59, 42, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 34,
}
var IdlExprTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	27, 28, 3, 25, 31, 24, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 23,
	29, 36, 30, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 34, 3, 35, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 32, 3, 33, 26,
}
var IdlExprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22,
}
var IdlExprTok3 = [...]int{
	0,
}

var IdlExprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	IdlExprDebug        = 0
	IdlExprErrorVerbose = false
)

type IdlExprLexer interface {
	Lex(lval *IdlExprSymType) int
	Error(s string)
}

type IdlExprParser interface {
	Parse(IdlExprLexer) int
	Lookahead() int
}

type IdlExprParserImpl struct {
	lval  IdlExprSymType
	stack [IdlExprInitialStackSize]IdlExprSymType
	char  int
}

func (p *IdlExprParserImpl) Lookahead() int {
	return p.char
}

func IdlExprNewParser() IdlExprParser {
	return &IdlExprParserImpl{}
}

const IdlExprFlag = -1000

func IdlExprTokname(c int) string {
	if c >= 1 && c-1 < len(IdlExprToknames) {
		if IdlExprToknames[c-1] != "" {
			return IdlExprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func IdlExprStatname(s int) string {
	if s >= 0 && s < len(IdlExprStatenames) {
		if IdlExprStatenames[s] != "" {
			return IdlExprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func IdlExprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !IdlExprErrorVerbose {
		return "syntax error"
	}

	for _, e := range IdlExprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + IdlExprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := IdlExprPact[state]
	for tok := TOKSTART; tok-1 < len(IdlExprToknames); tok++ {
		if n := base + tok; n >= 0 && n < IdlExprLast && IdlExprChk[IdlExprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if IdlExprDef[state] == -2 {
		i := 0
		for IdlExprExca[i] != -1 || IdlExprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; IdlExprExca[i] >= 0; i += 2 {
			tok := IdlExprExca[i]
			if tok < TOKSTART || IdlExprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if IdlExprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += IdlExprTokname(tok)
	}
	return res
}

func IdlExprlex1(lex IdlExprLexer, lval *IdlExprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = IdlExprTok1[0]
		goto out
	}
	if char < len(IdlExprTok1) {
		token = IdlExprTok1[char]
		goto out
	}
	if char >= IdlExprPrivate {
		if char < IdlExprPrivate+len(IdlExprTok2) {
			token = IdlExprTok2[char-IdlExprPrivate]
			goto out
		}
	}
	for i := 0; i < len(IdlExprTok3); i += 2 {
		token = IdlExprTok3[i+0]
		if token == char {
			token = IdlExprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = IdlExprTok2[1] /* unknown char */
	}
	if IdlExprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", IdlExprTokname(token), uint(char))
	}
	return char, token
}

func IdlExprParse(IdlExprlex IdlExprLexer) int {
	return IdlExprNewParser().Parse(IdlExprlex)
}

func (IdlExprrcvr *IdlExprParserImpl) Parse(IdlExprlex IdlExprLexer) int {
	var IdlExprn int
	var IdlExprVAL IdlExprSymType
	var IdlExprDollar []IdlExprSymType
	_ = IdlExprDollar // silence set and not used
	IdlExprS := IdlExprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	IdlExprstate := 0
	IdlExprrcvr.char = -1
	IdlExprtoken := -1 // IdlExprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		IdlExprstate = -1
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
	}()
	IdlExprp := -1
	goto IdlExprstack

ret0:
	return 0

ret1:
	return 1

IdlExprstack:
	/* put a state and value onto the stack */
	if IdlExprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", IdlExprTokname(IdlExprtoken), IdlExprStatname(IdlExprstate))
	}

	IdlExprp++
	if IdlExprp >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprS[IdlExprp] = IdlExprVAL
	IdlExprS[IdlExprp].yys = IdlExprstate

IdlExprnewstate:
	IdlExprn = IdlExprPact[IdlExprstate]
	if IdlExprn <= IdlExprFlag {
		goto IdlExprdefault /* simple state */
	}
	if IdlExprrcvr.char < 0 {
		IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
	}
	IdlExprn += IdlExprtoken
	if IdlExprn < 0 || IdlExprn >= IdlExprLast {
		goto IdlExprdefault
	}
	IdlExprn = IdlExprAct[IdlExprn]
	if IdlExprChk[IdlExprn] == IdlExprtoken { /* valid shift */
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
		IdlExprVAL = IdlExprrcvr.lval
		IdlExprstate = IdlExprn
		if Errflag > 0 {
			Errflag--
		}
		goto IdlExprstack
	}

IdlExprdefault:
	/* default state action */
	IdlExprn = IdlExprDef[IdlExprstate]
	if IdlExprn == -2 {
		if IdlExprrcvr.char < 0 {
			IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if IdlExprExca[xi+0] == -1 && IdlExprExca[xi+1] == IdlExprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			IdlExprn = IdlExprExca[xi+0]
			if IdlExprn < 0 || IdlExprn == IdlExprtoken {
				break
			}
		}
		IdlExprn = IdlExprExca[xi+1]
		if IdlExprn < 0 {
			goto ret0
		}
	}
	if IdlExprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			IdlExprlex.Error(IdlExprErrorMessage(IdlExprstate, IdlExprtoken))
			Nerrs++
			if IdlExprDebug >= 1 {
				__yyfmt__.Printf("%s", IdlExprStatname(IdlExprstate))
				__yyfmt__.Printf(" saw %s\n", IdlExprTokname(IdlExprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for IdlExprp >= 0 {
				IdlExprn = IdlExprPact[IdlExprS[IdlExprp].yys] + IdlExprErrCode
				if IdlExprn >= 0 && IdlExprn < IdlExprLast {
					IdlExprstate = IdlExprAct[IdlExprn] /* simulate a shift of "error" */
					if IdlExprChk[IdlExprstate] == IdlExprErrCode {
						goto IdlExprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if IdlExprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", IdlExprS[IdlExprp].yys)
				}
				IdlExprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if IdlExprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", IdlExprTokname(IdlExprtoken))
			}
			if IdlExprtoken == IdlExprEofCode {
				goto ret1
			}
			IdlExprrcvr.char = -1
			IdlExprtoken = -1
			goto IdlExprnewstate /* try again in the same state */
		}
	}

	/* reduction by production IdlExprn */
	if IdlExprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", IdlExprn, IdlExprStatname(IdlExprstate))
	}

	IdlExprnt := IdlExprn
	IdlExprpt := IdlExprp
	_ = IdlExprpt // guard against "declared and not used"

	IdlExprp -= IdlExprR2[IdlExprn]
	// IdlExprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if IdlExprp+1 >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprVAL = IdlExprS[IdlExprp+1]

	/* consult goto table to find next state */
	IdlExprn = IdlExprR1[IdlExprn]
	IdlExprg := IdlExprPgo[IdlExprn]
	IdlExprj := IdlExprg + IdlExprS[IdlExprp].yys + 1

	if IdlExprj >= IdlExprLast {
		IdlExprstate = IdlExprAct[IdlExprg]
	} else {
		IdlExprstate = IdlExprAct[IdlExprj]
		if IdlExprChk[IdlExprstate] != -IdlExprn {
			IdlExprstate = IdlExprAct[IdlExprg]
		}
	}
	// dummy call; replaced with literal code
	switch IdlExprnt {

	case 1:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:77
		{
			IdlExprVAL.Specification = AddDefinitions(IdlExprDollar[1].DefinitionDeclaration)
			context, _ := GetIdlExprContext(IdlExprlex)
			context.Specification = IdlExprVAL.Specification
		}
	case 2:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:84
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 3:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:87
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
			GetLast(IdlExprVAL.DefinitionDeclaration).SetNext(IdlExprDollar[2].DefinitionDeclaration)
		}
	case 4:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:93
		{
			err := AddTypeDclToContext(IdlExprlex, IdlExprDollar[1].DefinitionDeclaration)
			if err != nil {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 5:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:104
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				definitionDeclaration := lex.FindScopeName(IdlExprDollar[1].Identifier)
				if definitionDeclaration == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Value %v is not declared", IdlExprDollar[1].Identifier))
					return DefNotFound
				} else {
					IdlExprVAL.DefinedType = definitionDeclaration
				}
			} else {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure. %v", IdlExprDollar[1].Identifier))
				return NoLex
			}
		}
	case 6:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:122
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 7:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:128
		{
			value, ok := IdlExprDollar[2].ConstValue.Value().(int64)
			if ok {
				IdlExprVAL.IntegerValue = value
			} else {
				SendError(IdlExprlex, "Value must be an integer (int64)")
				return ErrorMustbeAnInt
			}
		}
	case 8:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:137
		{
			value, ok := IdlExprDollar[1].ConstValue.Value().(int64)
			if ok {
				IdlExprVAL.IntegerValue = value
			} else {
				SendError(IdlExprlex, "Value must be an integer (int64)")
				return ErrorMustbeAnInt
			}
		}
	case 9:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:148
		{
			IdlExprVAL.IntegerValue = -1
		}
	case 10:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:151
		{
			IdlExprVAL.IntegerValue = 0
		}
	case 11:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:155
		{
			IdlExprVAL.IntegerValue = 99
		}
	case 12:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:160
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				data := lex.FindScopeName(IdlExprDollar[1].DefinedType.GetName())
				if data == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Could not find defined value %v", IdlExprDollar[1].DefinedType.GetName()))
					return 10003
				}
			} else {
				IdlExprlex.Error("Could not find lex")
				return NoLex
			}
		}
	case 13:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:173
		{
			IdlExprVAL.ConstValue = IdlExprDollar[1].ConstValue
		}
	case 14:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:176
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[2].IntegerValue, interfaces.Int64)
		}
	case 15:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:181
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].IntegerValue, interfaces.Int64)
		}
	case 16:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:184
		{
			IdlExprVAL.ConstValue = newConstantValue([]byte(IdlExprDollar[1].StringValue)[0], interfaces.Char, 1)
		}
	case 18:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:192
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 19:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:195
		{
			if IdlExprDollar[1].DefinitionDeclaration == nil {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl

			}
			if typeDecl, ok := IdlExprDollar[1].DefinitionDeclaration.(interfaces.ITypeDeclaration); ok {
				err := AddTypedefDcl(IdlExprlex, typeDecl)
				if err != nil {
					SendError(IdlExprlex, "AddTypedefDcl error")
					return ErrorOnAddTypedefDcl
				}
			} else {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

		}
	case 20:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:214
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 21:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:219
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchAlpha{Length: IdlExprDollar[3].IntegerValue}
		}
	case 22:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:220
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchByte{}
		}
	case 23:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:221
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchDate{}
		}
	case 24:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:222
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchTime{}
		}
	case 25:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:223
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchPrice04{}
		}
	case 26:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:224
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchPrice08{}
		}
	case 27:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:225
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchUInt08{}
		}
	case 28:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:226
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchUInt16{}
		}
	case 29:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:227
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchUInt32{}
		}
	case 30:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:228
		{
			IdlExprVAL.DefinedType = &MitchDefinedTypes.MitchUInt64{}
		}
	case 31:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:231
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 32:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:234
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 33:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:240
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 34:
		IdlExprDollar = IdlExprS[IdlExprpt-18 : IdlExprpt+1]
//line yacc/idl.y:245
		{
			IdlExprVAL.DefinedType = MitchDefinedTypes.NewMitchBitField(IdlExprDollar[3].Identifier, IdlExprDollar[5].Identifier, IdlExprDollar[7].Identifier, IdlExprDollar[9].Identifier, IdlExprDollar[11].Identifier, IdlExprDollar[13].Identifier, IdlExprDollar[15].Identifier, IdlExprDollar[17].Identifier)
		}
	case 35:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:250
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 36:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:253
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 37:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:258
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration

		}
	case 38:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:265
		{
			def := NewMitchMessageDefinition(IdlExprDollar[2].Identifier, 0, 0)
			member := IdlExprDollar[4].Member
			for member != nil {
				decl := member.Declarator
				for decl != nil {
					def.AddMember(member.DefinedType, decl)
					decl = decl.Next()
				}
				member = member.Next
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 39:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:278
		{
			def := NewMitchMessageDefinition(IdlExprDollar[2].Identifier, 0, 0)
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 40:
		IdlExprDollar = IdlExprS[IdlExprpt-10 : IdlExprpt+1]
//line yacc/idl.y:283
		{
			def := NewMitchMessageDefinition(IdlExprDollar[7].Identifier, IdlExprDollar[3].IntegerValue, IdlExprDollar[5].IntegerValue)
			member := IdlExprDollar[9].Member
			for member != nil {
				decl := member.Declarator
				for decl != nil {
					def.AddMember(member.DefinedType, decl)
					decl = decl.Next()
				}
				member = member.Next
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 41:
		IdlExprDollar = IdlExprS[IdlExprpt-9 : IdlExprpt+1]
//line yacc/idl.y:296
		{
			def := NewMitchMessageDefinition(IdlExprDollar[7].Identifier, IdlExprDollar[3].IntegerValue, IdlExprDollar[5].IntegerValue)
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 42:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:302
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator, nil)
		}
	case 43:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:305
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].Member.DefinedType, IdlExprDollar[1].Member.Declarator, IdlExprDollar[2].Member)
		}
	case 44:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:312
		{
			def := NewEnumDcl(IdlExprDollar[2].Identifier)
			decl := IdlExprDollar[4].Declarator
			for decl != nil {
				def.AddMember(decl)
				decl = decl.Next()
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 45:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:322
		{
		}
	case 46:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:323
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
		}
	case 47:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:329
		{

		}
	case 48:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:334
		{

		}
	case 49:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:337
		{

		}
	case 50:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:342
		{
		}
	case 51:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:347
		{
			IdlExprVAL.Identifier = IdlExprDollar[1].Identifier
		}
	case 52:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:352
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[2].DefinitionDeclaration
		}
	case 53:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:356
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 54:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:359
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 55:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:362
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinitionDeclaration, IdlExprDollar[2].Declarator)
		}
	case 56:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:366
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 57:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:369
		{

		}
	case 58:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:372
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	case 59:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:377
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, IdlExprDollar[3].ConstValue)
		}
	case 60:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:380
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 61:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:383
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	}
	goto IdlExprstack /* stack new state and value */
}
