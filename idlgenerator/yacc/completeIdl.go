// Code generated by goyacc -o completeIdl.go -p CompleteIdl completeIdl.y. DO NOT EDIT.

//line completeIdl.y:2
package yacc

import __yyfmt__ "fmt"

//line completeIdl.y:2

import "github.com/bhbosman/CodeGenerators/idlgenerator/ScopingInterfaces"
import "github.com/bhbosman/CodeGenerators/idlgenerator/scopedObjects"

//go:generate goyacc -o completeIdl.go  -p "CompleteIdl"  completeIdl.y

//line completeIdl.y:108
type CompleteIdlSymType struct {
	yys                      int
	ReservedWord             ScopingInterfaces.IReservedWordData
	InterfaceKind            ScopingInterfaces.IInterfaceKind
	Identifier               ScopingInterfaces.IIdlIdentifier
	IntegerValue             int
	StringValue              string
	PrimaryExpression        ScopingInterfaces.IPrimaryExpression
	ModuleDcl                ScopingInterfaces.IIdlModuleDcl
	Definition               ScopingInterfaces.IIdlDefinition
	Member                   ScopingInterfaces.IStructMember
	TypeSpec                 ScopingInterfaces.ITypeSpec
	Declarator               ScopingInterfaces.IDeclarator
	Enumerator               ScopingInterfaces.IEnumerator
	TypedefDcl               ScopingInterfaces.ITypedefDcl
	TypeDeclarator           ScopingInterfaces.ITypeDeclarator
	TypeDcl                  ScopingInterfaces.ITypeDcl
	constr_type_dcl          ScopingInterfaces.Iconstr_type_dcl
	native_dcl               ScopingInterfaces.Inative_dcl
	union_dcl                ScopingInterfaces.Iunion_dcl
	enum_dcl                 ScopingInterfaces.Ienum_dcl
	bitset_dcl               ScopingInterfaces.Ibitset_dcl
	bitmask_dcl              ScopingInterfaces.Ibitmask_dcl
	struct_def               ScopingInterfaces.IStructType
	union_def                ScopingInterfaces.Iunion_def
	union_forward_dcl        ScopingInterfaces.Iunion_forward_dcl
	parameter_dcls           ScopingInterfaces.IParameterDeclarations
	value_kind               ScopingInterfaces.IIdlValueKind
	InterfaceHeader          ScopingInterfaces.IInterfaceHeader
	InterfaceInheritanceSpec ScopingInterfaces.IInterfaceInheritanceSpec
	InterfaceNamePlus        ScopingInterfaces.IInterfaceNamePlus
	AttrDeclarator           ScopingInterfaces.IAttrDeclarator
	ValueInheritanceSpec     ScopingInterfaces.IValueInheritanceSpec
	IdlValueHeader           ScopingInterfaces.IIdlValueHeader
	DeclaredType             ScopingInterfaces.IDeclaredType
	ScopedName               ScopingInterfaces.IScopedName
	ParamAttribute           ScopingInterfaces.IParamAttribute
}

const ScopeOp = 57346
const ShlOp = 57347
const ShrOp = 57348
const Annotation = 57349
const string_literal = 57350
const identifier = 57351
const integer_literal = 57352
const floating_pt_literal = 57353
const fixed_pt_literal = 57354
const character_literal = 57355
const wide_character_literal = 57356
const wide_string_literal = 57357
const Hex_literal = 57358
const RWabstract = 57359
const RWany = 57360
const RWalias = 57361
const RWattribute = 57362
const RWbitfield = 57363
const RWbitmask = 57364
const RWbitset = 57365
const RWboolean = 57366
const RWcase = 57367
const RWchar = 57368
const RWcomponent = 57369
const RWconnector = 57370
const RWconst = 57371
const RWconsumes = 57372
const RWcontext = 57373
const RWcustom = 57374
const RWdefault = 57375
const RWdouble = 57376
const RWexception = 57377
const RWemits = 57378
const RWenum = 57379
const RWeventtype = 57380
const RWfactory = 57381
const RWFALSE = 57382
const RWfinder = 57383
const RWfixed = 57384
const RWfloat = 57385
const RWgetraises = 57386
const RWhome = 57387
const RWimport = 57388
const RWin = 57389
const RWinout = 57390
const RWinterface = 57391
const RWlocal = 57392
const RWlong = 57393
const RWmanages = 57394
const RWmap = 57395
const RWmirrorport = 57396
const RWmodule = 57397
const RWmultiple = 57398
const RWnative = 57399
const RWObject = 57400
const RWoctet = 57401
const RWoneway = 57402
const RWout = 57403
const RWprimarykey = 57404
const RWprivate = 57405
const RWport = 57406
const RWporttype = 57407
const RWprovides = 57408
const RWpublic = 57409
const RWpublishes = 57410
const RWraises = 57411
const RWreadonly = 57412
const RWsetraises = 57413
const RWsequence = 57414
const RWshort = 57415
const RWstring = 57416
const RWstruct = 57417
const RWsupports = 57418
const RWswitch = 57419
const RWTRUE = 57420
const RWtruncatable = 57421
const RWtypedef = 57422
const RWtypeid = 57423
const RWtypename = 57424
const RWtypeprefix = 57425
const RWunsigned = 57426
const RWunion = 57427
const RWuses = 57428
const RWValueBase = 57429
const RWvaluetype = 57430
const RWvoid = 57431
const RWwchar = 57432
const RWwstring = 57433
const RWint8 = 57434
const RWuint8 = 57435
const RWint16 = 57436
const RWint32 = 57437
const RWint64 = 57438
const RWuint16 = 57439
const RWuint32 = 57440
const RWuint64 = 57441

var CompleteIdlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ScopeOp",
	"ShlOp",
	"ShrOp",
	"Annotation",
	"string_literal",
	"identifier",
	"integer_literal",
	"floating_pt_literal",
	"fixed_pt_literal",
	"character_literal",
	"wide_character_literal",
	"wide_string_literal",
	"Hex_literal",
	"RWabstract",
	"RWany",
	"RWalias",
	"RWattribute",
	"RWbitfield",
	"RWbitmask",
	"RWbitset",
	"RWboolean",
	"RWcase",
	"RWchar",
	"RWcomponent",
	"RWconnector",
	"RWconst",
	"RWconsumes",
	"RWcontext",
	"RWcustom",
	"RWdefault",
	"RWdouble",
	"RWexception",
	"RWemits",
	"RWenum",
	"RWeventtype",
	"RWfactory",
	"RWFALSE",
	"RWfinder",
	"RWfixed",
	"RWfloat",
	"RWgetraises",
	"RWhome",
	"RWimport",
	"RWin",
	"RWinout",
	"RWinterface",
	"RWlocal",
	"RWlong",
	"RWmanages",
	"RWmap",
	"RWmirrorport",
	"RWmodule",
	"RWmultiple",
	"RWnative",
	"RWObject",
	"RWoctet",
	"RWoneway",
	"RWout",
	"RWprimarykey",
	"RWprivate",
	"RWport",
	"RWporttype",
	"RWprovides",
	"RWpublic",
	"RWpublishes",
	"RWraises",
	"RWreadonly",
	"RWsetraises",
	"RWsequence",
	"RWshort",
	"RWstring",
	"RWstruct",
	"RWsupports",
	"RWswitch",
	"RWTRUE",
	"RWtruncatable",
	"RWtypedef",
	"RWtypeid",
	"RWtypename",
	"RWtypeprefix",
	"RWunsigned",
	"RWunion",
	"RWuses",
	"RWValueBase",
	"RWvaluetype",
	"RWvoid",
	"RWwchar",
	"RWwstring",
	"RWint8",
	"RWuint8",
	"RWint16",
	"RWint32",
	"RWint64",
	"RWuint16",
	"RWuint32",
	"RWuint64",
	"';'",
	"'{'",
	"'}'",
	"','",
	"'='",
	"'|'",
	"'^'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'~'",
	"'('",
	"')'",
	"'<'",
	"'>'",
	"':'",
	"'['",
	"']'",
	"'@'",
}
var CompleteIdlStatenames = [...]string{}

const CompleteIdlEofCode = 1
const CompleteIdlErrCode = 2
const CompleteIdlInitialStackSize = 16

//line completeIdl.y:3146

//line yacctab:1
var CompleteIdlExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	100, 373,
	-2, 1,
	-1, 180,
	101, 199,
	-2, 198,
	-1, 182,
	101, 258,
	-2, 287,
	-1, 188,
	101, 316,
	-2, 314,
	-1, 191,
	101, 261,
	-2, 377,
	-1, 406,
	103, 269,
	-2, 263,
	-1, 676,
	102, 158,
	-2, 162,
}

const CompleteIdlPrivate = 57344

const CompleteIdlLast = 1598

var CompleteIdlAct = [...]int{

	158, 252, 452, 253, 485, 677, 637, 435, 358, 635,
	621, 574, 579, 523, 569, 401, 641, 590, 363, 450,
	406, 260, 98, 110, 496, 338, 359, 336, 402, 337,
	365, 159, 313, 423, 143, 144, 146, 334, 339, 407,
	341, 394, 335, 251, 100, 3, 161, 364, 79, 329,
	160, 165, 281, 151, 290, 266, 276, 169, 168, 275,
	167, 166, 225, 274, 594, 240, 2, 164, 372, 109,
	262, 220, 249, 108, 102, 293, 395, 267, 267, 684,
	107, 106, 292, 105, 104, 301, 264, 306, 683, 646,
	101, 231, 12, 267, 12, 230, 11, 645, 11, 292,
	229, 10, 412, 10, 307, 480, 228, 7, 647, 7,
	226, 6, 479, 6, 227, 5, 464, 5, 411, 268,
	268, 99, 648, 66, 291, 353, 123, 347, 348, 349,
	350, 351, 354, 58, 205, 268, 500, 460, 73, 72,
	203, 296, 638, 60, 65, 22, 581, 583, 76, 575,
	501, 26, 522, 71, 63, 204, 522, 356, 619, 570,
	582, 61, 35, 256, 689, 74, 75, 258, 682, 631,
	620, 21, 257, 51, 212, 211, 627, 623, 616, 561,
	658, 64, 642, 473, 474, 475, 584, 468, 491, 490,
	489, 77, 488, 458, 467, 355, 52, 33, 466, 34,
	357, 78, 471, 472, 57, 602, 504, 333, 533, 534,
	668, 506, 360, 360, 576, 205, 670, 571, 459, 221,
	695, 361, 593, 632, 628, 343, 342, 566, 254, 255,
	344, 346, 507, 331, 624, 563, 325, 522, 507, 503,
	502, 465, 461, 392, 295, 685, 206, 298, 656, 269,
	277, 654, 651, 650, 605, 604, 205, 536, 360, 535,
	528, 481, 442, 414, 404, 403, 397, 399, 403, 409,
	309, 391, 330, 390, 367, 655, 547, 513, 510, 373,
	304, 366, 373, 424, 424, 428, 429, 430, 431, 432,
	221, 368, 434, 436, 437, 12, 405, 441, 303, 11,
	302, 382, 448, 299, 10, 215, 190, 187, 457, 389,
	7, 181, 693, 179, 6, 150, 149, 426, 5, 148,
	691, 562, 396, 532, 398, 110, 410, 413, 531, 530,
	422, 421, 400, 420, 419, 418, 277, 415, 417, 416,
	383, 360, 380, 379, 433, 378, 377, 360, 381, 439,
	376, 371, 447, 538, 455, 79, 446, 375, 360, 445,
	374, 454, 370, 369, 96, 95, 94, 93, 486, 463,
	487, 109, 366, 477, 92, 108, 102, 91, 90, 89,
	88, 476, 107, 106, 478, 105, 104, 87, 86, 85,
	84, 495, 101, 83, 82, 482, 360, 81, 80, 387,
	186, 12, 200, 99, 499, 11, 308, 438, 123, 409,
	10, 184, 505, 287, 292, 591, 7, 592, 214, 622,
	6, 205, 526, 288, 5, 282, 440, 99, 424, 509,
	366, 292, 123, 511, 512, 498, 497, 581, 583, 525,
	213, 527, 592, 209, 210, 283, 362, 198, 508, 23,
	185, 582, 199, 638, 493, 575, 653, 570, 388, 543,
	210, 516, 152, 674, 451, 607, 333, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 245, 408, 524,
	99, 425, 549, 205, 99, 123, 482, 244, 521, 123,
	515, 514, 331, 325, 548, 586, 553, 556, 557, 554,
	555, 360, 156, 360, 551, 403, 403, 403, 409, 595,
	552, 596, 558, 559, 560, 550, 545, 542, 587, 544,
	541, 366, 600, 608, 205, 609, 540, 611, 601, 520,
	155, 330, 603, 598, 599, 606, 427, 492, 425, 610,
	154, 612, 99, 462, 386, 385, 353, 123, 347, 348,
	349, 350, 351, 354, 613, 324, 384, 615, 326, 305,
	271, 321, 270, 322, 318, 486, 99, 487, 618, 597,
	147, 123, 205, 208, 205, 316, 205, 519, 356, 518,
	99, 517, 626, 207, 205, 97, 205, 630, 217, 657,
	216, 248, 202, 201, 197, 644, 196, 639, 323, 195,
	194, 319, 193, 403, 366, 192, 191, 640, 315, 643,
	189, 320, 188, 183, 317, 182, 355, 180, 649, 142,
	565, 470, 469, 205, 247, 652, 45, 661, 453, 614,
	328, 664, 327, 314, 659, 667, 625, 312, 662, 660,
	663, 629, 665, 436, 669, 666, 633, 617, 360, 311,
	672, 300, 346, 246, 44, 529, 673, 444, 443, 436,
	43, 42, 62, 41, 40, 39, 679, 568, 567, 223,
	222, 219, 294, 681, 218, 38, 280, 680, 279, 278,
	273, 289, 686, 272, 59, 690, 37, 36, 564, 636,
	486, 634, 487, 692, 145, 573, 694, 572, 297, 265,
	589, 99, 588, 687, 671, 353, 123, 347, 348, 349,
	350, 351, 354, 678, 676, 176, 675, 539, 259, 261,
	1, 119, 352, 117, 332, 340, 449, 20, 19, 18,
	17, 114, 16, 15, 14, 13, 9, 356, 8, 174,
	113, 68, 67, 25, 688, 153, 70, 69, 115, 50,
	175, 49, 48, 47, 46, 177, 120, 24, 250, 484,
	483, 4, 131, 130, 129, 128, 163, 162, 28, 173,
	132, 121, 27, 172, 171, 355, 170, 127, 126, 125,
	124, 137, 112, 111, 178, 103, 157, 118, 122, 136,
	141, 133, 134, 135, 138, 139, 140, 31, 99, 30,
	29, 32, 236, 123, 393, 343, 342, 345, 54, 238,
	344, 346, 176, 237, 243, 233, 73, 72, 119, 232,
	117, 224, 53, 22, 578, 577, 56, 263, 114, 26,
	494, 71, 585, 234, 55, 235, 174, 113, 580, 0,
	35, 0, 0, 0, 0, 115, 0, 175, 0, 0,
	0, 51, 177, 120, 239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 0, 173, 132, 121, 77,
	0, 0, 0, 0, 52, 33, 0, 34, 137, 78,
	0, 178, 0, 241, 118, 122, 136, 141, 133, 134,
	135, 138, 139, 140, 99, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	243, 0, 73, 72, 119, 0, 117, 0, 0, 22,
	0, 0, 0, 0, 114, 26, 0, 71, 0, 0,
	0, 0, 174, 113, 0, 0, 35, 0, 0, 0,
	0, 115, 0, 175, 0, 0, 0, 51, 177, 120,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 173, 132, 121, 77, 0, 0, 0, 0,
	52, 33, 0, 34, 137, 78, 0, 178, 0, 241,
	118, 122, 136, 141, 133, 134, 135, 138, 139, 140,
	99, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 73, 72,
	119, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 0, 71, 0, 0, 0, 0, 174, 113,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 175,
	0, 0, 0, 0, 177, 120, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 173, 132,
	121, 77, 0, 286, 0, 0, 0, 0, 0, 284,
	137, 78, 0, 178, 0, 0, 118, 122, 136, 141,
	133, 134, 135, 138, 139, 140, 99, 287, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 288, 0, 282,
	176, 285, 0, 242, 0, 0, 119, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 0, 283,
	0, 0, 0, 0, 174, 113, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 175, 0, 0, 0, 0,
	177, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 132, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 178,
	0, 0, 118, 122, 136, 141, 133, 134, 135, 138,
	139, 140, 99, 0, 537, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 119, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 0, 0, 0,
	174, 113, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 175, 0, 0, 0, 0, 177, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 132, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 178, 0, 0, 118, 122,
	136, 141, 133, 134, 135, 138, 139, 140, 66, 0,
	456, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 73, 72, 0, 0, 0, 60, 65,
	22, 0, 0, 76, 0, 0, 26, 0, 71, 63,
	0, 0, 0, 0, 0, 0, 61, 35, 0, 0,
	74, 75, 0, 0, 0, 99, 21, 0, 51, 0,
	123, 0, 0, 0, 0, 0, 64, 0, 0, 176,
	0, 0, 0, 0, 0, 119, 77, 117, 0, 0,
	0, 52, 33, 0, 34, 114, 78, 0, 0, 57,
	0, 0, 0, 174, 113, 0, 0, 0, 0, 0,
	0, 0, 115, 310, 175, 0, 0, 0, 0, 177,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 132, 121, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 137, 123, 0, 178, 0,
	0, 118, 122, 136, 141, 133, 134, 135, 138, 139,
	140, 119, 0, 117, 0, 0, 0, 0, 0, 99,
	0, 114, 0, 0, 123, 0, 0, 0, 0, 116,
	113, 0, 0, 0, 0, 0, 0, 0, 115, 119,
	0, 117, 0, 0, 0, 0, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 121, 0, 0, 0, 0, 546, 0, 0, 0,
	0, 137, 0, 0, 120, 0, 0, 118, 122, 136,
	141, 133, 134, 135, 138, 139, 140, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 118, 66, 136, 141, 133,
	134, 135, 138, 139, 140, 0, 58, 0, 0, 0,
	0, 73, 72, 0, 0, 0, 60, 65, 22, 0,
	0, 76, 0, 0, 26, 0, 71, 63, 0, 0,
	0, 0, 0, 0, 61, 35, 0, 0, 74, 75,
	0, 0, 0, 0, 21, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 52,
	33, 0, 34, 0, 78, 0, 0, 57,
}
var CompleteIdlPact = [...]int{

	1509, -1000, 1509, -1000, 298, 297, 294, 293, 290, 289,
	288, 287, 280, 279, 278, 277, 274, 267, 266, 265,
	264, 576, 1397, -1000, -1000, -1000, 610, -1000, -1000, -1000,
	-1000, -1000, -1000, 476, 476, 562, -1000, -1000, 218, -1000,
	-1000, -1000, -1000, -1000, 215, 214, -1000, -1000, -1000, -1000,
	-1000, 453, 986, 212, 608, 210, 606, 604, 362, 206,
	603, 601, 205, 597, 596, 593, 591, -1000, -1000, -1000,
	-1000, 590, 587, 585, -1000, 398, 364, 584, 583, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 39, 130, 574,
	564, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	619, -1000, -1000, -1000, -1000, 409, -1000, -1000, -1000, -1000,
	-1000, 59, 58, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 367, -1000, -1000,
	-1000, -1000, 204, 582, 580, -1000, 619, -1000, 794, -1000,
	-1000, -1000, -1000, -1000, 453, 453, 453, -1000, 619, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 47, 56, 51, -1000, -1000, -1000, 890,
	-32, -1000, 2, 1321, -1000, 553, 551, 1033, 6, 23,
	-1000, 2, 202, -33, -1000, 199, 197, 179, -1000, -1000,
	550, -14, 329, 1271, 526, 549, 697, -1000, 96, -1000,
	-1000, 117, 117, -1000, 395, 1321, -1000, -1000, 172, 794,
	-1000, -1000, 263, 262, 251, 260, 257, 250, 246, 245,
	243, 242, 248, 240, 547, 536, 535, -1000, -1000, 310,
	-1000, -1000, 438, 1321, -1000, -1000, 171, 169, -1000, -1000,
	140, -1000, -43, -1000, -1000, -1000, 1321, 117, 1321, 165,
	-1000, 890, -1000, -1000, 476, 162, -1000, 476, 399, -1000,
	17, 1, 161, 1033, -1000, 239, 238, 235, 234, 233,
	231, 230, 423, 480, 476, 476, 476, 476, 476, 338,
	-1000, 476, 476, 476, 355, 374, 476, 160, -1000, 359,
	-1000, 476, 455, -1000, -1000, 2, 1178, 476, 79, 116,
	-1000, 20, 139, -1000, 534, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 47, 1397, -1000, -1000, -1, 138, -1000,
	-1000, -1000, 93, 619, 88, 80, 616, 94, 73, -1000,
	538, -1000, -1000, -1000, -1000, -1000, 117, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 117, -5, -1000,
	619, -12, -1000, 159, 1321, -1000, 453, -1000, -1000, -1000,
	-1000, -1000, -1000, 78, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 76, 75, 74, 528, 1321, 453,
	-1000, -1000, 453, -43, -1000, 117, 33, 137, 136, -1000,
	-1000, 103, -1000, 619, -1000, -1000, 336, 135, 476, 619,
	177, 890, 890, 176, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 482, 619, -1000, 481, 423, 572, 570,
	568, 520, 479, -1000, 619, 134, 619, 417, 476, 370,
	476, 619, -1000, 158, -1000, 229, 228, 223, 619, 106,
	-1000, -1000, 157, 155, -1000, 1082, -1000, 252, 1425, -1000,
	175, 526, -1000, -1000, 473, 697, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, -1000, 64, -1000, -1000,
	-1000, -1000, -1000, 221, 132, -1000, -43, -1000, 612, 112,
	102, 99, 72, 453, -1000, 371, 119, -1000, -1000, -56,
	117, -1000, 117, 1321, 476, 476, 476, 476, 129, -1000,
	890, 153, 152, 890, -1000, -1000, 456, -1000, -1000, -1000,
	-1000, -1000, 476, -1000, 476, 417, 476, 417, -1000, -1000,
	-1000, -1000, -1000, -1000, 455, -1000, -1000, -1000, 1321, 63,
	-1000, -1000, -1000, 619, -1000, -1000, 393, -1000, -1000, -1000,
	-1000, 88, 80, 616, 94, 94, 73, 73, -1000, -1000,
	-1000, -1000, -1000, 453, 55, -1000, 350, 62, 131, -1000,
	1321, 350, 61, 121, -1000, 1321, 350, 54, 120, -1000,
	1321, -1000, -1000, -1000, 406, -1000, 350, 119, -1000, 346,
	-1000, 68, 68, 453, -1000, -20, -28, 5, -1000, -1000,
	103, -1000, 476, 151, -1000, -1000, 150, -1000, 619, 619,
	-1000, 417, -1000, -1000, 433, 149, 174, 146, -1000, 581,
	-1000, -1000, 66, 350, 410, 453, -1000, 350, 408, 453,
	-1000, 350, 390, 453, 95, -1000, 113, -1000, 1321, -1000,
	-1000, -1000, 476, -1000, -1000, -1000, -1000, 117, -1000, 103,
	-1000, -1000, -1000, 454, -1000, -1000, -1000, -1000, 476, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	406, 453, 53, -29, -39, 143, -1000, -1000, 1321, 49,
	-1000, -1000, -1000, -1000, 476, -1000, -1000, 220, 453, -1000,
	211, -1000, -1000, -1000, 118, -1000,
}
var CompleteIdlPgo = [...]int{

	0, 838, 834, 55, 832, 830, 39, 15, 827, 826,
	825, 824, 12, 822, 821, 62, 819, 815, 813, 809,
	808, 807, 40, 38, 25, 29, 27, 804, 3, 10,
	28, 20, 30, 47, 18, 65, 802, 801, 800, 487,
	799, 797, 786, 477, 51, 67, 44, 785, 783, 782,
	780, 779, 778, 777, 61, 60, 58, 57, 776, 774,
	773, 31, 50, 46, 772, 768, 767, 766, 765, 764,
	763, 762, 114, 761, 760, 4, 759, 72, 758, 43,
	757, 754, 753, 752, 751, 749, 747, 746, 745, 449,
	110, 743, 742, 741, 106, 738, 736, 100, 95, 91,
	735, 734, 733, 732, 730, 729, 728, 727, 19, 726,
	8, 41, 725, 26, 724, 37, 42, 722, 0, 7,
	1, 24, 45, 66, 720, 70, 21, 719, 718, 717,
	716, 714, 5, 713, 703, 703, 702, 700, 17, 16,
	699, 698, 698, 698, 698, 697, 695, 11, 694, 691,
	9, 689, 6, 68, 688, 687, 686, 684, 683, 681,
	54, 680, 63, 59, 56, 679, 678, 676, 52, 33,
	675, 674, 672, 13, 671, 71, 670, 669, 668, 667,
	14, 665, 664, 663, 662, 661, 660, 658, 657, 655,
	655, 654, 653, 651, 651, 649, 647, 637, 32, 633,
	633, 633, 632, 630, 49, 630, 630, 2, 629, 629,
	629, 629, 629, 628, 628, 626, 624, 624, 624, 591,
	591, 591, 591, 591, 591, 591,
}
var CompleteIdlR1 = [...]int{

	0, 124, 123, 123, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 73, 73, 119, 119, 118, 118, 118, 72, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 113,
	114, 114, 115, 115, 116, 116, 26, 26, 26, 25,
	25, 25, 24, 24, 24, 24, 23, 23, 112, 112,
	112, 22, 22, 22, 21, 21, 21, 21, 21, 21,
	21, 21, 117, 117, 110, 90, 90, 90, 35, 35,
	39, 39, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 44, 44, 44, 45, 45, 48, 48, 48, 48,
	50, 50, 51, 51, 52, 52, 49, 49, 49, 49,
	68, 68, 69, 69, 70, 70, 54, 55, 56, 57,
	43, 43, 43, 43, 43, 61, 61, 62, 62, 63,
	63, 66, 47, 89, 89, 89, 89, 89, 81, 81,
	92, 92, 92, 33, 33, 34, 34, 32, 93, 82,
	82, 86, 129, 129, 129, 129, 129, 129, 130, 131,
	131, 132, 133, 135, 135, 134, 87, 83, 109, 109,
	108, 28, 27, 27, 111, 80, 121, 121, 120, 91,
	88, 88, 88, 77, 78, 78, 79, 79, 74, 76,
	76, 75, 75, 58, 94, 95, 95, 64, 65, 13,
	13, 20, 20, 20, 8, 7, 7, 30, 128, 128,
	126, 126, 127, 127, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 14, 14, 14, 14, 36, 36,
	10, 11, 11, 12, 1, 1, 1, 29, 15, 15,
	18, 4, 4, 19, 5, 5, 136, 136, 136, 137,
	138, 139, 96, 96, 96, 96, 38, 2, 2, 9,
	9, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	6, 31, 140, 141, 142, 142, 142, 143, 143, 144,
	144, 144, 144, 145, 146, 146, 147, 40, 97, 98,
	99, 148, 148, 59, 16, 149, 149, 149, 150, 151,
	151, 152, 17, 17, 154, 154, 153, 41, 37, 37,
	37, 60, 100, 100, 156, 155, 157, 157, 157, 157,
	159, 158, 161, 161, 161, 162, 162, 162, 162, 162,
	162, 162, 163, 169, 169, 164, 164, 101, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 172, 171,
	174, 174, 174, 175, 175, 175, 176, 176, 176, 176,
	178, 179, 179, 180, 160, 165, 166, 167, 173, 177,
	177, 177, 177, 102, 102, 102, 102, 183, 183, 182,
	182, 181, 184, 184, 184, 184, 103, 103, 186, 185,
	187, 188, 188, 188, 189, 190, 190, 168, 168, 104,
	191, 191, 193, 192, 194, 194, 105, 195, 197, 197,
	198, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 196, 200, 200, 106, 202, 203, 203, 204,
	204, 201, 206, 206, 205, 67, 67, 208, 84, 209,
	207, 210, 211, 211, 212, 212, 212, 85, 213, 214,
	53, 71, 107, 215, 217, 217, 217, 217, 219, 216,
	218, 218, 220, 220, 220, 221, 222, 222, 223, 223,
	224, 224, 225,
}
var CompleteIdlR2 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 5, 4, 1, 3, 1, 2, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 3, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 4, 4, 1, 4,
	1, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	5, 7, 4, 1, 2, 0, 1, 3, 2, 1,
	1, 9, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 0, 3, 2, 2, 2, 5, 1, 3,
	1, 2, 1, 2, 3, 2, 1, 3, 1, 2,
	2, 2, 2, 1, 1, 3, 1, 1, 1, 1,
	3, 1, 1, 1, 5, 1, 1, 4, 2, 2,
	3, 1, 2, 2, 2, 1, 3, 1, 1, 0,
	0, 1, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 4, 5, 5, 6, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 4, 1, 1,
	4, 2, 1, 3, 2, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 4, 3, 2, 1,
	2, 0, 2, 2, 4, 2, 4, 3, 5, 1,
	3, 1, 0, 0, 1, 1, 1, 4, 4, 5,
	6, 6, 7, 1, 1, 3, 3, 2, 3, 3,
	2, 1, 1, 1, 6, 0, 1, 2, 1, 1,
	3, 3, 2, 2, 1, 3, 4, 3, 3, 7,
	6, 1, 1, 1, 2, 4, 2, 3, 3, 4,
	2, 1, 0, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 3, 4, 4, 4, 5,
	4, 5, 5, 6, 5, 6, 6, 7, 2, 1,
	0, 1, 2, 1, 2, 2, 4, 5, 5, 6,
	1, 1, 3, 3, 2, 3, 3, 3, 2, 4,
	5, 5, 6, 0, 1, 1, 1, 2, 3, 6,
	7, 4, 2, 3, 3, 4, 1, 1, 2, 5,
	2, 2, 2, 2, 0, 1, 2, 3, 3, 4,
	2, 3, 2, 0, 1, 2, 8, 1, 1, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 1, 2, 6, 1, 1, 3, 1,
	1, 6, 1, 3, 1, 8, 6, 0, 13, 0,
	0, 3, 4, 6, 1, 1, 1, 5, 0, 1,
	1, 1, 4, 2, 1, 2, 2, 2, 0, 1,
	3, 5, 1, 1, 1, 1, 2, 5, 1, 1,
	1, 3, 3,
}
var CompleteIdlChk = [...]int{

	-1000, -124, -123, -122, -73, -72, -90, -94, -95, -96,
	-97, -98, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, 55, 29, -89, -80, -91, 35, -64, -65, -38,
	-40, -41, -37, 81, 83, 46, -155, -156, -170, -181,
	-182, -183, -185, -186, -191, -215, -81, -82, -83, -84,
	-85, 57, 80, -13, -20, -2, -9, 88, 17, -157,
	27, 45, -184, 38, 65, 28, 7, -92, -93, -86,
	-87, 37, 23, 22, 49, 50, 32, 75, 85, -122,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 9, -118, 4,
	-46, -45, -44, -47, -54, -55, -56, -57, -62, -63,
	-118, -48, -49, 43, 34, 51, 42, 26, 90, 24,
	59, 74, 91, 9, -50, -51, -52, -53, -68, -69,
	-70, -71, 73, 94, 95, 96, 92, 84, 97, 98,
	99, 93, 9, -118, -118, -148, -118, 8, 101, 101,
	101, -120, 9, -88, -39, -43, -89, -42, -118, -61,
	-62, -63, -66, -67, -45, -44, -54, -55, -56, -57,
	-58, -59, -60, 72, 42, 53, 18, 58, 87, 101,
	9, 101, 9, 9, 49, 88, 38, 101, 9, 9,
	101, 9, 9, 9, 9, 9, 9, 9, 49, 88,
	38, 9, 9, 101, 116, 4, 116, 9, 9, 34,
	51, 116, 116, 73, 51, 101, 8, 8, -171, -174,
	-175, -125, -176, -177, -14, -15, -90, -72, -94, -97,
	-98, -99, -16, -17, 39, 41, -36, -18, -19, 60,
	-35, 89, 70, 20, -39, -43, -192, -216, -219, -77,
	-78, -79, -120, -28, -77, -77, 116, 116, 116, -128,
	-126, -127, -125, -8, 118, -140, -3, 76, 118, -35,
	9, 9, -158, -161, -162, -163, -164, -15, -165, -166,
	-167, -168, 66, 86, 36, 68, 30, 54, 64, -159,
	-160, 118, 76, 52, -172, -160, 118, -141, -3, 101,
	-193, 118, 101, 101, 101, 9, 101, 118, 77, -123,
	102, -195, -197, -198, -199, 82, 49, 88, 38, 75,
	85, 35, 37, 72, 29, -61, 9, -202, -203, -204,
	-35, -113, -114, -118, -115, -116, -26, -25, -24, -23,
	-112, -22, 109, 108, 113, -21, 114, 10, 11, 12,
	13, 14, -117, 8, 15, 78, 40, 104, -110, -113,
	-118, -110, 51, -34, -33, -32, -35, 102, -175, 100,
	100, 100, -153, 31, 100, 100, 100, 100, 100, 100,
	100, 100, -153, 100, 9, 9, 9, 89, 20, -35,
	102, 102, 103, -27, -111, 119, -35, -110, -35, 102,
	-125, -7, -30, -118, 102, -30, -31, -6, 79, -118,
	-3, 101, 101, -3, 102, -162, 100, 100, 100, 100,
	100, 100, 100, -169, -118, 58, -169, 56, -118, -118,
	-118, -118, -118, -160, -118, -119, -118, -118, 52, -160,
	52, -118, 102, -187, -188, -163, -164, -168, -118, -109,
	-108, 9, -207, -213, -3, -33, 102, -118, 114, 102,
	117, 103, 9, -46, 117, 103, 105, 106, 107, 6,
	5, 108, 109, 110, 111, 112, -22, -113, -113, 117,
	117, 102, -32, -74, -76, -75, -120, -28, 114, 114,
	114, 114, 9, -35, -5, -120, -121, -79, -111, -110,
	103, 117, 103, 103, 103, 76, 76, 103, -6, -31,
	101, -126, -126, 101, 9, 9, -169, 9, 9, 9,
	9, 9, 103, -173, 62, -118, 52, -118, 102, -189,
	100, 100, 100, 102, 103, 102, 102, 102, 101, -129,
	-45, -54, -56, -118, -55, -57, 51, 101, -198, 9,
	-204, -115, -116, -26, -25, -25, -24, -24, -23, -23,
	-23, 115, 100, 103, -154, 8, 115, -178, -179, -180,
	47, 115, -145, -146, -147, 47, 115, -10, -11, -12,
	-1, 47, 61, 48, 114, -4, -120, -121, -136, -137,
	-138, 44, 71, 103, 120, -110, -110, -35, -30, -30,
	-7, -31, 76, -126, 102, 102, -126, 9, -118, -118,
	-173, -118, -173, -108, -208, -34, 115, -196, -75, 103,
	115, -29, 69, 115, 103, -35, -29, 115, 103, -35,
	-29, 115, 103, -35, -149, -150, -151, -152, 47, -29,
	-138, -139, 114, -139, -120, 117, 117, 103, 117, -7,
	102, 102, -173, 23, 102, 101, 102, 8, 114, -29,
	-180, -120, -29, -147, -120, -29, -12, -120, 115, -150,
	103, -35, -119, -110, 9, -130, -131, -132, -133, -119,
	-152, -120, 115, 117, 118, 102, -132, -134, -35, 115,
	-118, 100, -75, 101, -207, 102,
}
var CompleteIdlDef = [...]int{

	373, -2, -2, 2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 76, 77, 0, 195, 196, 252,
	253, 254, 255, 0, 0, 0, 312, 313, 0, 374,
	375, 376, 386, 387, 0, 0, 133, 134, 135, 136,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 139, 149,
	150, 0, 0, 0, 201, 0, 0, 0, 0, 3,
	4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
	14, 15, 16, 17, 18, 19, 20, 25, 0, 0,
	0, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 94, 95, 91, 92, 102, 132, 116, 117, 118,
	119, 128, 130, 25, 96, 97, 98, 99, 106, 107,
	108, 109, 100, 101, 103, 105, 450, 0, 111, 113,
	115, 451, 0, 0, 0, 290, 291, 292, 350, 403,
	458, 175, 178, 179, 0, 0, 0, 80, 81, 120,
	121, 122, 123, 124, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 0, 0, 0, 193, 293, 311, 209,
	-2, 272, -2, 0, 203, 0, 0, 322, -2, 0,
	273, -2, 388, 400, 453, 0, 0, 0, 202, 260,
	0, 148, 166, 373, 0, 0, 0, 26, 0, 93,
	104, 0, 0, 110, 112, 145, 288, 289, 0, 349,
	351, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 239, 0,
	228, 229, 0, 0, 78, 79, 0, 0, 459, 180,
	183, 184, 186, 187, 181, 182, 0, 0, 0, 0,
	208, 211, 213, 200, 0, 0, 257, 0, 0, 307,
	308, 378, 0, 321, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 383, 0,
	401, 0, 0, 440, 448, 261, 0, 0, 0, 373,
	22, 0, 407, 408, 0, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 27, 0, 426, 427,
	429, 430, 39, 61, 40, 42, 44, 46, 49, 52,
	0, 57, 58, 59, 60, 62, 0, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 0, 0, 74,
	61, 0, 114, 0, 146, 143, 0, 337, 352, 354,
	355, 214, 303, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 302, 223, 0, 0, 0, 0, 0, 0,
	399, 452, 0, 171, 172, 0, 0, 0, 0, 197,
	212, 204, 205, 207, 256, 262, -2, 265, 0, 271,
	0, 210, 210, 0, 315, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 319, 320, 364, 23, 338, 0, 0,
	0, 348, 381, 0, 394, 0, 0, 0, 402, 0,
	168, 170, 0, 0, 385, 0, 142, 0, 0, 21,
	0, 0, 410, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 28, 127,
	129, 194, 144, 0, 188, 189, 191, 192, 0, 0,
	0, 0, 0, 0, 243, 176, 245, 185, 173, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 267, 269,
	210, 0, 0, 210, 332, 335, 0, 365, 366, 367,
	397, 398, 0, 341, 0, 339, 0, 342, 389, 390,
	391, 392, 393, 167, 0, 437, 447, 140, 145, 0,
	152, 153, 154, 155, 156, 157, 102, 422, 409, 425,
	428, 41, 43, 45, 47, 48, 50, 51, 53, 54,
	55, 63, 147, 0, 0, 304, 356, 0, 360, 361,
	0, 369, 0, 283, 284, 0, 224, 0, 230, 231,
	0, 234, 235, 236, 295, 240, 176, 242, 244, 247,
	248, 0, 0, 0, 174, 0, 0, 0, 206, 264,
	266, 270, 0, 0, 310, 379, 0, 336, 24, 368,
	345, 346, 343, 169, 0, 0, 0, 0, 190, 0,
	306, 357, 0, 358, 0, 0, 370, 371, 0, 0,
	225, 226, 0, 0, 0, 296, 298, 299, 0, 241,
	246, 249, 0, 250, 177, 125, 131, 0, 436, 268,
	309, 380, 347, 0, 141, 162, 406, 305, 0, 359,
	362, 363, 372, 285, 286, 227, 232, 233, 294, 297,
	0, 0, 0, 0, 0, 0, -2, 159, 0, 0,
	300, 301, 251, 435, 0, 151, 160, 0, 0, 237,
	0, 161, 165, 440, 0, 438,
}
var CompleteIdlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 112, 107, 3,
	114, 115, 110, 108, 103, 109, 3, 111, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 118, 100,
	116, 104, 117, 3, 121, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 119, 3, 120, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 105, 102, 113,
}
var CompleteIdlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99,
}
var CompleteIdlTok3 = [...]int{
	0,
}

var CompleteIdlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	CompleteIdlDebug        = 0
	CompleteIdlErrorVerbose = false
)

//type CompleteIdlLexer interface {
//	Lex(lval *CompleteIdlSymType) int
//	Error(s string)
//}

type CompleteIdlParser interface {
	Parse(CompleteIdlLexer) int
	Lookahead() int
}

type CompleteIdlParserImpl struct {
	lval  CompleteIdlSymType
	stack [CompleteIdlInitialStackSize]CompleteIdlSymType
	char  int
}

func (p *CompleteIdlParserImpl) Lookahead() int {
	return p.char
}

func CompleteIdlNewParser() CompleteIdlParser {
	return &CompleteIdlParserImpl{}
}

const CompleteIdlFlag = -1000

func CompleteIdlTokname(c int) string {
	if c >= 1 && c-1 < len(CompleteIdlToknames) {
		if CompleteIdlToknames[c-1] != "" {
			return CompleteIdlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func CompleteIdlStatname(s int) string {
	if s >= 0 && s < len(CompleteIdlStatenames) {
		if CompleteIdlStatenames[s] != "" {
			return CompleteIdlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func CompleteIdlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !CompleteIdlErrorVerbose {
		return "syntax error"
	}

	for _, e := range CompleteIdlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + CompleteIdlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := CompleteIdlPact[state]
	for tok := TOKSTART; tok-1 < len(CompleteIdlToknames); tok++ {
		if n := base + tok; n >= 0 && n < CompleteIdlLast && CompleteIdlChk[CompleteIdlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if CompleteIdlDef[state] == -2 {
		i := 0
		for CompleteIdlExca[i] != -1 || CompleteIdlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; CompleteIdlExca[i] >= 0; i += 2 {
			tok := CompleteIdlExca[i]
			if tok < TOKSTART || CompleteIdlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if CompleteIdlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += CompleteIdlTokname(tok)
	}
	return res
}

func CompleteIdllex1(lex CompleteIdlLexer, lval *CompleteIdlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = CompleteIdlTok1[0]
		goto out
	}
	if char < len(CompleteIdlTok1) {
		token = CompleteIdlTok1[char]
		goto out
	}
	if char >= CompleteIdlPrivate {
		if char < CompleteIdlPrivate+len(CompleteIdlTok2) {
			token = CompleteIdlTok2[char-CompleteIdlPrivate]
			goto out
		}
	}
	for i := 0; i < len(CompleteIdlTok3); i += 2 {
		token = CompleteIdlTok3[i+0]
		if token == char {
			token = CompleteIdlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = CompleteIdlTok2[1] /* unknown char */
	}
	if CompleteIdlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", CompleteIdlTokname(token), uint(char))
	}
	return char, token
}

func CompleteIdlParse(CompleteIdllex CompleteIdlLexer) int {
	return CompleteIdlNewParser().Parse(CompleteIdllex)
}

func (CompleteIdlrcvr *CompleteIdlParserImpl) Parse(CompleteIdllex CompleteIdlLexer) int {
	var CompleteIdln int
	var CompleteIdlVAL CompleteIdlSymType
	var CompleteIdlDollar []CompleteIdlSymType
	_ = CompleteIdlDollar // silence set and not used
	CompleteIdlS := CompleteIdlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	CompleteIdlstate := 0
	CompleteIdlrcvr.char = -1
	CompleteIdltoken := -1 // CompleteIdlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		CompleteIdlstate = -1
		CompleteIdlrcvr.char = -1
		CompleteIdltoken = -1
	}()
	CompleteIdlp := -1
	goto CompleteIdlstack

ret0:
	return 0

ret1:
	return 1

CompleteIdlstack:
	/* put a state and value onto the stack */
	if CompleteIdlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", CompleteIdlTokname(CompleteIdltoken), CompleteIdlStatname(CompleteIdlstate))
	}

	CompleteIdlp++
	if CompleteIdlp >= len(CompleteIdlS) {
		nyys := make([]CompleteIdlSymType, len(CompleteIdlS)*2)
		copy(nyys, CompleteIdlS)
		CompleteIdlS = nyys
	}
	CompleteIdlS[CompleteIdlp] = CompleteIdlVAL
	CompleteIdlS[CompleteIdlp].yys = CompleteIdlstate

CompleteIdlnewstate:
	CompleteIdln = CompleteIdlPact[CompleteIdlstate]
	if CompleteIdln <= CompleteIdlFlag {
		goto CompleteIdldefault /* simple state */
	}
	if CompleteIdlrcvr.char < 0 {
		CompleteIdlrcvr.char, CompleteIdltoken = CompleteIdllex1(CompleteIdllex, &CompleteIdlrcvr.lval)
	}
	CompleteIdln += CompleteIdltoken
	if CompleteIdln < 0 || CompleteIdln >= CompleteIdlLast {
		goto CompleteIdldefault
	}
	CompleteIdln = CompleteIdlAct[CompleteIdln]
	if CompleteIdlChk[CompleteIdln] == CompleteIdltoken { /* valid shift */
		CompleteIdlrcvr.char = -1
		CompleteIdltoken = -1
		CompleteIdlVAL = CompleteIdlrcvr.lval
		CompleteIdlstate = CompleteIdln
		if Errflag > 0 {
			Errflag--
		}
		goto CompleteIdlstack
	}

CompleteIdldefault:
	/* default state action */
	CompleteIdln = CompleteIdlDef[CompleteIdlstate]
	if CompleteIdln == -2 {
		if CompleteIdlrcvr.char < 0 {
			CompleteIdlrcvr.char, CompleteIdltoken = CompleteIdllex1(CompleteIdllex, &CompleteIdlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if CompleteIdlExca[xi+0] == -1 && CompleteIdlExca[xi+1] == CompleteIdlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			CompleteIdln = CompleteIdlExca[xi+0]
			if CompleteIdln < 0 || CompleteIdln == CompleteIdltoken {
				break
			}
		}
		CompleteIdln = CompleteIdlExca[xi+1]
		if CompleteIdln < 0 {
			goto ret0
		}
	}
	if CompleteIdln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			CompleteIdllex.Error(CompleteIdlErrorMessage(CompleteIdlstate, CompleteIdltoken))
			Nerrs++
			if CompleteIdlDebug >= 1 {
				__yyfmt__.Printf("%s", CompleteIdlStatname(CompleteIdlstate))
				__yyfmt__.Printf(" saw %s\n", CompleteIdlTokname(CompleteIdltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for CompleteIdlp >= 0 {
				CompleteIdln = CompleteIdlPact[CompleteIdlS[CompleteIdlp].yys] + CompleteIdlErrCode
				if CompleteIdln >= 0 && CompleteIdln < CompleteIdlLast {
					CompleteIdlstate = CompleteIdlAct[CompleteIdln] /* simulate a shift of "error" */
					if CompleteIdlChk[CompleteIdlstate] == CompleteIdlErrCode {
						goto CompleteIdlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if CompleteIdlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", CompleteIdlS[CompleteIdlp].yys)
				}
				CompleteIdlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if CompleteIdlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", CompleteIdlTokname(CompleteIdltoken))
			}
			if CompleteIdltoken == CompleteIdlEofCode {
				goto ret1
			}
			CompleteIdlrcvr.char = -1
			CompleteIdltoken = -1
			goto CompleteIdlnewstate /* try again in the same state */
		}
	}

	/* reduction by production CompleteIdln */
	if CompleteIdlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", CompleteIdln, CompleteIdlStatname(CompleteIdlstate))
	}

	CompleteIdlnt := CompleteIdln
	CompleteIdlpt := CompleteIdlp
	_ = CompleteIdlpt // guard against "declared and not used"

	CompleteIdlp -= CompleteIdlR2[CompleteIdln]
	// CompleteIdlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if CompleteIdlp+1 >= len(CompleteIdlS) {
		nyys := make([]CompleteIdlSymType, len(CompleteIdlS)*2)
		copy(nyys, CompleteIdlS)
		CompleteIdlS = nyys
	}
	CompleteIdlVAL = CompleteIdlS[CompleteIdlp+1]

	/* consult goto table to find next state */
	CompleteIdln = CompleteIdlR1[CompleteIdln]
	CompleteIdlg := CompleteIdlPgo[CompleteIdln]
	CompleteIdlj := CompleteIdlg + CompleteIdlS[CompleteIdlp].yys + 1

	if CompleteIdlj >= CompleteIdlLast {
		CompleteIdlstate = CompleteIdlAct[CompleteIdlg]
	} else {
		CompleteIdlstate = CompleteIdlAct[CompleteIdlj]
		if CompleteIdlChk[CompleteIdlstate] != -CompleteIdln {
			CompleteIdlstate = CompleteIdlAct[CompleteIdlg]
		}
	}
	// dummy call; replaced with literal code
	switch CompleteIdlnt {

	case 1:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:307
		{
			CompleteIdllex.InfoAt("specification/definitionPlus", CompleteIdlDollar[1].TypeSpec)
			var err error
			_, err = CompleteIdllex.AssignSpec(CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 2:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:321
		{
			CompleteIdllex.InfoAt("definitionPlus/definition", CompleteIdlDollar[1].TypeSpec)
			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdlDollar[1].TypeSpec, nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 3:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:330
		{
			CompleteIdllex.InfoAt("definitionPlus/definitionPlus definition", CompleteIdlDollar[1].TypeSpec, CompleteIdlDollar[2].TypeSpec)
			CompleteIdlDollar[1].TypeSpec.SetNextTypeSpec(CompleteIdlDollar[2].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 4:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:338
		{
			CompleteIdllex.InfoAt("definition/module_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec

		}
	case 5:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:344
		{
			CompleteIdllex.InfoAt("definition/const_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 6:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:349
		{
			CompleteIdllex.InfoAt("definition/type_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 7:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:354
		{
			CompleteIdllex.InfoAt("definition/except_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 8:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:359
		{
			CompleteIdllex.InfoAt("definition/interface_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 9:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:364
		{
			CompleteIdllex.InfoAt("definition/value_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 10:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:369
		{
			CompleteIdllex.InfoAt("definition/type_id_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 11:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:374
		{
			CompleteIdllex.InfoAt("definition/type_prefix_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 12:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:379
		{
			CompleteIdllex.InfoAt("definition/import_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 13:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:384
		{
			CompleteIdllex.InfoAt("definition/component_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 14:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:389
		{
			CompleteIdllex.InfoAt("definition/home_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 15:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:394
		{
			CompleteIdllex.InfoAt("definition/event_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 16:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:399
		{
			CompleteIdllex.InfoAt("definition/porttype_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 17:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:404
		{
			CompleteIdllex.InfoAt("definition/connector_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 18:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:409
		{
			CompleteIdllex.InfoAt("definition/template_module_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 19:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:414
		{
			CompleteIdllex.InfoAt("definition/template_module_inst", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 20:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:419
		{
			CompleteIdllex.InfoAt("definition/annotation_dcl", CompleteIdlDollar[1].TypeSpec)
		}
	case 21:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:426
		{
			CompleteIdllex.InfoAt("RWmodule identifier '{' definitionPlus '}'", CompleteIdlDollar[2].Identifier, CompleteIdlDollar[4].TypeSpec)
			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdllex.CreateModuleDcl(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[4].TypeSpec)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 22:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:436
		{
			CompleteIdllex.InfoAt("RWmodule identifier '{'  '}'", CompleteIdlDollar[2].Identifier)
			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdllex.CreateModuleDcl(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier.Identifier(), nil)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 23:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:450
		{
			CompleteIdllex.InfoAt("scoped_namePlus/scoped_name", CompleteIdlDollar[1].ScopedName)
			CompleteIdlVAL.ScopedName = scopedObjects.NewScopedName02(CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[1].ScopedName.Identifier())
		}
	case 24:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:455
		{
			CompleteIdllex.InfoAt("scoped_namePlus/scoped_namePlus ',' scoped_name", CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[3].ScopedName)
			CompleteIdlVAL.ScopedName = CompleteIdlDollar[1].ScopedName
			err := CompleteIdlDollar[1].ScopedName.NextScopedName(CompleteIdlDollar[3].ScopedName)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 25:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:466
		{
			CompleteIdllex.InfoAt("scoped_name/identifier", CompleteIdlDollar[1].Identifier)
			CompleteIdlVAL.ScopedName = scopedObjects.NewScopedName02(CompleteIdlDollar[1].Identifier, CompleteIdlDollar[1].Identifier.Identifier())
		}
	case 26:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:471
		{
			CompleteIdllex.InfoAt("scoped_name/ScopeOp identifier", CompleteIdlDollar[2].Identifier)
			CompleteIdlVAL.ScopedName = scopedObjects.NewScopedName02(CompleteIdlDollar[2].Identifier, "::"+CompleteIdlDollar[2].Identifier.Identifier())
		}
	case 27:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:476
		{
			CompleteIdllex.InfoAt("scoped_name/scoped_name ScopeOp identifier", CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[3].Identifier)
			CompleteIdlVAL.ScopedName = scopedObjects.NewScopedName02(CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[1].ScopedName.Identifier()+"::"+CompleteIdlDollar[3].Identifier.Identifier())
		}
	case 28:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:483
		{
			CompleteIdllex.InfoAt("RWconst const_type identifier '=' const_expr", CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].DeclaredType, CompleteIdlDollar[3].Identifier, CompleteIdlDollar[5].IntegerValue)

			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdllex.NewIdlConstDcl(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[3].Identifier.Identifier(), CompleteIdlDollar[5].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 29:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:496
		{
			CompleteIdllex.InfoAt("const_type/integer_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 30:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:501
		{
			CompleteIdllex.InfoAt("const_type/floating_pt_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 31:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:506
		{
			CompleteIdllex.InfoAt("const_type/fixed_pt_const_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 32:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:511
		{
			CompleteIdllex.InfoAt("const_type/char_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 33:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:516
		{
			CompleteIdllex.InfoAt("const_type/wide_char_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 34:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:521
		{
			CompleteIdllex.InfoAt("const_type/boolean_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 35:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:526
		{
			CompleteIdllex.InfoAt("const_type/octet_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 36:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:531
		{
			CompleteIdllex.InfoAt("const_type/string_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 37:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:536
		{
			CompleteIdllex.InfoAt("const_type/wide_string_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 38:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:541
		{
			var err error
			CompleteIdlVAL.DeclaredType, err = scopedObjects.NewEmptyIdlDefinition(CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[1].ScopedName.Identifier()), nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 39:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:552
		{
			CompleteIdllex.InfoAt("const_expr/or_expr", CompleteIdlDollar[1].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue
		}
	case 40:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:559
		{
			CompleteIdllex.InfoAt("or_expr/xor_expr", CompleteIdlDollar[1].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue
		}
	case 41:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:564
		{
			CompleteIdllex.InfoAt("or_expr/or_expr '|' xor_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue | CompleteIdlDollar[3].IntegerValue
		}
	case 42:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:571
		{
			CompleteIdllex.InfoAt("xor_expr/and_expr", CompleteIdlDollar[1].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue
		}
	case 43:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:576
		{
			CompleteIdllex.InfoAt("xor_expr/xor_expr '^' and_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue ^ CompleteIdlDollar[3].IntegerValue
		}
	case 44:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:584
		{
			CompleteIdllex.InfoAt("and_expr/shift_expr", CompleteIdlDollar[1].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue
		}
	case 45:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:589
		{
			CompleteIdllex.InfoAt("and_expr/and_expr '&' shift_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue & CompleteIdlDollar[3].IntegerValue
		}
	case 46:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:597
		{
			CompleteIdllex.InfoAt("shift_expr/add_expr", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.IntegerValue, err = CompleteIdllex.AddExpr(CompleteIdlDollar[1].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 47:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:607
		{
			CompleteIdllex.InfoAt("shift_expr/shift_expr ShrOp add_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			if CompleteIdlDollar[3].IntegerValue < 0 {
				CompleteIdllex.Error("shift count must be positive")
			}
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue >> uint64(CompleteIdlDollar[3].IntegerValue)
		}
	case 48:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:615
		{
			CompleteIdllex.InfoAt("shift_expr/shift_expr ShlOp add_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			if CompleteIdlDollar[3].IntegerValue < 0 {
				CompleteIdllex.Error("shift count must be positive")
			}

			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue << uint64(CompleteIdlDollar[3].IntegerValue)
		}
	case 49:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:626
		{
			CompleteIdllex.InfoAt("add_expr/mult_expr", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.IntegerValue, err = CompleteIdllex.MultiExpr(CompleteIdlDollar[1].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 50:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:636
		{
			CompleteIdllex.InfoAt("add_expr/add_expr '+' mult_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			var err error
			CompleteIdlVAL.IntegerValue, err = CompleteIdllex.AddOperator(CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 51:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:646
		{
			CompleteIdllex.InfoAt("add_expr/add_expr '-' mult_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			var err error
			CompleteIdlVAL.IntegerValue, err = CompleteIdllex.MinusOperator(CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 52:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:658
		{
			CompleteIdllex.InfoAt("mult_expr/unary_expr", CompleteIdlDollar[1].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue
		}
	case 53:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:663
		{
			CompleteIdllex.InfoAt("mult_expr/mult_expr '*' unary_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue * CompleteIdlDollar[3].IntegerValue
		}
	case 54:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:668
		{
			CompleteIdllex.InfoAt("mult_expr/mult_expr '/' unary_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue / CompleteIdlDollar[3].IntegerValue
		}
	case 55:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:673
		{
			CompleteIdllex.InfoAt("mult_expr/mult_expr '%' unary_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[3].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue % CompleteIdlDollar[3].IntegerValue
		}
	case 56:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:680
		{
			CompleteIdllex.InfoAt("unary_expr/unary_operator primary_expr", CompleteIdlDollar[1].IntegerValue, CompleteIdlDollar[2].PrimaryExpression)
			if CompleteIdlDollar[2].PrimaryExpression.Type() == ScopingInterfaces.PetInteger {
				CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue * CompleteIdlDollar[2].PrimaryExpression.Value().(int)
			} else {
				CompleteIdllex.Error("expression not an integer")
				return 1
			}
		}
	case 57:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:690
		{
			CompleteIdllex.InfoAt("unary_expr/primary_expr", CompleteIdlDollar[1].PrimaryExpression)
			if CompleteIdlDollar[1].PrimaryExpression.Type() == ScopingInterfaces.PetInteger {
				CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].PrimaryExpression.Value().(int)
			} else {
				CompleteIdllex.Error("expression not an integer")
				return 1
			}

		}
	case 58:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:704
		{
			CompleteIdlVAL.IntegerValue = -1
		}
	case 59:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:708
		{
			CompleteIdlVAL.IntegerValue = +1
		}
	case 60:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:712
		{

		}
	case 61:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:718
		{
			CompleteIdllex.InfoAt("primary_expr/scoped_name", CompleteIdlDollar[1].ScopedName)
			//		v, err := strconv.Atoi($1)
			//		if err != nil {
			//			CompleteIdllex.Error(err.Error())
			//			return 1
			//		}
			CompleteIdllex.Error("implement me......... primary_expr/scoped_name")
			//$$ = int(v)
		}
	case 62:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:729
		{
			CompleteIdllex.InfoAt("primary_expr/literal", CompleteIdlDollar[1].PrimaryExpression)
			CompleteIdlVAL.PrimaryExpression = CompleteIdlDollar[1].PrimaryExpression
		}
	case 63:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:734
		{
			CompleteIdllex.InfoAt("primary_expr/'(' const_expr ')'", CompleteIdlDollar[2].IntegerValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformInteger(CompleteIdlDollar[2].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 64:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:746
		{
			CompleteIdllex.InfoAt("literal/integer_literal", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformInteger(CompleteIdlDollar[1].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 65:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:756
		{
			CompleteIdllex.InfoAt("literal/floating_pt_literal", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformValue(CompleteIdlDollar[1].IntegerValue, ScopingInterfaces.PetFloatingPoint)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 66:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:766
		{
			CompleteIdllex.InfoAt("literal/fixed_pt_literal", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformValue(CompleteIdlDollar[1].IntegerValue, ScopingInterfaces.PetFixedPoint)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 67:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:776
		{
			CompleteIdllex.InfoAt("literal/character_literal", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformValue(CompleteIdlDollar[1].IntegerValue, ScopingInterfaces.PetCharacter)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 68:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:786
		{
			CompleteIdllex.InfoAt("literal/wide_character_literal", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformValue(CompleteIdlDollar[1].IntegerValue, ScopingInterfaces.PetWideCharacter)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 69:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:796
		{
			CompleteIdllex.InfoAt("literal/boolean_literal", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformValue(CompleteIdlDollar[1].IntegerValue, ScopingInterfaces.PetBoolean)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 70:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:806
		{
			CompleteIdllex.InfoAt("literal/string_literal", CompleteIdlDollar[1].StringValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformString(CompleteIdlDollar[1].StringValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 71:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:816
		{
			CompleteIdllex.InfoAt("literal/wide_string_literal", CompleteIdlDollar[1].IntegerValue)
			var err error
			CompleteIdlVAL.PrimaryExpression, err = CompleteIdllex.TransformValue(CompleteIdlDollar[1].IntegerValue, ScopingInterfaces.PetWideString)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 72:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:828
		{
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue
		}
	case 73:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:832
		{
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue
		}
	case 74:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:838
		{
			CompleteIdllex.InfoAt("const_expr", CompleteIdlDollar[1].IntegerValue)
			if CompleteIdlDollar[1].IntegerValue < 0 {
				CompleteIdllex.Error("expression must be positive")
				return 1
			}
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[1].IntegerValue
		}
	case 75:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:849
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 76:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:853
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].native_dcl
		}
	case 77:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:857
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeDeclarator
		}
	case 78:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:863
		{
			CompleteIdllex.InfoAt("type_spec/simple_type_spec", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 79:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:868
		{
			CompleteIdllex.InfoAt("type_spec/template_type_spec")
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 80:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:876
		{
			CompleteIdllex.InfoAt("simple_type_spec/base_type_spec", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 81:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:881
		{
			CompleteIdllex.InfoAt("simple_type_spec/scoped_name", CompleteIdlDollar[1].ScopedName)
			var err error
			CompleteIdlVAL.DeclaredType, err = scopedObjects.NewEmptyIdlDefinition(CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[1].ScopedName.Identifier()), nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}

		}
	case 82:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:894
		{
			CompleteIdllex.InfoAt("base_type_spec/integer_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 83:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:899
		{
			CompleteIdllex.InfoAt("base_type_spec/floating_pt_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 84:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:904
		{
			CompleteIdllex.InfoAt("base_type_spec/char_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 85:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:909
		{
			CompleteIdllex.InfoAt("base_type_spec/wide_char_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 86:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:914
		{
			CompleteIdllex.InfoAt("base_type_spec/boolean_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 87:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:919
		{
			CompleteIdllex.InfoAt("base_type_spec/octet_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 88:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:924
		{
			CompleteIdllex.InfoAt("base_type_spec/any_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 89:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:929
		{
			CompleteIdllex.InfoAt("base_type_spec/object_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 90:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:934
		{
			CompleteIdllex.InfoAt("base_type_spec/value_base_type", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 91:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:941
		{
			CompleteIdllex.InfoAt("RWfloat")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "float")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 92:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:950
		{
			CompleteIdllex.InfoAt("RWdouble")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "double")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 93:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:959
		{
			CompleteIdllex.InfoAt("RWlong RWdouble")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "long double")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 94:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:971
		{
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 95:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:975
		{
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 96:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:981
		{
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 97:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:984
		{
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 98:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:987
		{
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 99:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:990
		{
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 100:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:996
		{
			CompleteIdllex.InfoAt("RWshort")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "short")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 101:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1006
		{
			CompleteIdllex.InfoAt("RWint16")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "int16")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}

		}
	case 102:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1019
		{
			CompleteIdllex.InfoAt("RWlong")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "long")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}

		}
	case 103:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1030
		{
			CompleteIdllex.InfoAt("RWint32")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "int32")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}

		}
	case 104:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1044
		{
			CompleteIdllex.InfoAt("RWlong RWlong")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "long long")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 105:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1054
		{
			CompleteIdllex.InfoAt("RWint64")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "int64")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 106:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1067
		{
			CompleteIdllex.InfoAt("unsigned_short_int", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 107:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1071
		{
			CompleteIdllex.InfoAt("unsigned_long_int", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 108:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1075
		{
			CompleteIdllex.InfoAt("unsigned_longlong_int", CompleteIdlDollar[1].DeclaredType)
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 109:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1079
		{
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 110:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1086
		{
			CompleteIdllex.InfoAt("RWunsigned RWshort")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "unsigned short")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 111:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1096
		{
			CompleteIdllex.InfoAt("RWuint16")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "uint16")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 112:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1109
		{
			CompleteIdllex.InfoAt("RWunsigned RWlong")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "unsigned long")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 113:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1119
		{
			CompleteIdllex.InfoAt("RWuint32")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "uint32")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 114:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1132
		{
			CompleteIdllex.InfoAt("RWunsigned RWlong RWlong")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "unsigned long long")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 115:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1142
		{
			CompleteIdllex.InfoAt("RWuint64")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "uint64")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 116:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1155
		{
			CompleteIdllex.InfoAt("RWchar")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "char")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 117:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1166
		{
			CompleteIdllex.InfoAt("RWwchar")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "wchar")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 118:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1178
		{
			CompleteIdllex.InfoAt("RWboolean")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "boolean")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 119:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1190
		{
			CompleteIdllex.InfoAt("RWoctet")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "octet")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 120:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1202
		{
			CompleteIdllex.InfoAt("sequence_type")
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].TypeSpec
		}
	case 121:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1207
		{
			CompleteIdllex.InfoAt("string_type")
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 122:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1212
		{
			CompleteIdllex.InfoAt("wide_string_type")
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 123:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1217
		{
			CompleteIdllex.InfoAt("fixed_pt_type")
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].TypeSpec
		}
	case 124:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1222
		{
			CompleteIdllex.InfoAt("map_type")
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].TypeSpec
		}
	case 125:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:1230
		{
			CompleteIdllex.InfoAt("RWsequence '<' type_spec ',' positive_int_const '>'", CompleteIdlDollar[3].DeclaredType, CompleteIdlDollar[5].IntegerValue)
			if CompleteIdlDollar[5].IntegerValue <= 0 {
				CompleteIdllex.Error("need a positive int")
				return 1
			}
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewSequenceType(
				CompleteIdlDollar[1].ReservedWord,
				CompleteIdlDollar[3].DeclaredType, CompleteIdlDollar[5].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 126:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:1246
		{
			CompleteIdllex.InfoAt("RWsequence '<' type_spec '>'", CompleteIdlDollar[3].DeclaredType)
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewSequenceType(
				CompleteIdlDollar[1].ReservedWord,
				CompleteIdlDollar[3].DeclaredType, 0)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 127:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:1260
		{
			CompleteIdllex.InfoAt("string_type/RWstring '<' positive_int_const '>'", CompleteIdlDollar[3].IntegerValue)
			if CompleteIdlDollar[3].IntegerValue <= 0 {
				CompleteIdllex.Error("need a positive int")
				return 1
			}
			var err error
			CompleteIdlVAL.DeclaredType, err = scopedObjects.NewStringType(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[3].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 128:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1274
		{
			CompleteIdllex.InfoAt("string_type/| RWstring")
			var err error
			CompleteIdlVAL.DeclaredType, err = scopedObjects.NewStringType(CompleteIdlDollar[1].ReservedWord, 0)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 129:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:1286
		{
			CompleteIdllex.InfoAt("wide_string_type/RWwstring '<' positive_int_const '>'", CompleteIdlDollar[3].IntegerValue)
			if CompleteIdlDollar[3].IntegerValue <= 0 {
				CompleteIdllex.Error("need a positive int")
				return 1
			}
			var err error
			CompleteIdlVAL.DeclaredType, err = scopedObjects.NewWideStringType(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[3].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 130:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1300
		{
			CompleteIdllex.InfoAt("wide_string_type/RWwstring")
			var err error
			CompleteIdlVAL.DeclaredType, err = scopedObjects.NewWideStringType(CompleteIdlDollar[1].ReservedWord, 0)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 131:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:1312
		{
			CompleteIdllex.InfoAt("fixed_pt_type/RWfixed '<' positive_int_const ',' positive_int_const '>'", CompleteIdlDollar[3].IntegerValue)
			if CompleteIdlDollar[3].IntegerValue <= 0 {
				CompleteIdllex.Error("need a positive int")
				return 1
			}
			if CompleteIdlDollar[5].IntegerValue <= 0 {
				CompleteIdllex.Error("need a positive int")
				return 1
			}
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewFixedPointType(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[3].IntegerValue, CompleteIdlDollar[5].IntegerValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 132:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1332
		{
			CompleteIdllex.Error("fix this")
			return 1
		}
	case 133:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1339
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].struct_def
		}
	case 134:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1343
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].union_dcl
		}
	case 135:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1347
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].enum_dcl
		}
	case 136:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1351
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].bitset_dcl
		}
	case 137:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1355
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].bitmask_dcl
		}
	case 138:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1362
		{
			CompleteIdlVAL.struct_def = CompleteIdlDollar[1].struct_def
		}
	case 139:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1366
		{
			CompleteIdlVAL.struct_def = CompleteIdlDollar[1].struct_def
		}
	case 140:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:1371
		{
			CompleteIdllex.InfoAt("RWstruct identifier '{' memberPlus '}'", CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier, CompleteIdlDollar[4].Member)
			var err error
			CompleteIdlVAL.struct_def, err = CompleteIdllex.NewStructType(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[4].Member, false)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 141:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-7 : CompleteIdlpt+1]
//line completeIdl.y:1381
		{
			var err error
			CompleteIdlVAL.struct_def, err = CompleteIdllex.NewStructType(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[6].Member, false)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 142:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:1390
		{
			var err error
			CompleteIdlVAL.struct_def, err = CompleteIdllex.NewStructType(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier.Identifier(), nil, false)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 143:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1401
		{
			CompleteIdllex.InfoAt("memberPlus/member")
			CompleteIdlVAL.Member = CompleteIdlDollar[1].Member
		}
	case 144:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1405
		{
			CompleteIdllex.InfoAt("memberPlus/memberPlus member")
			CompleteIdlVAL.Member = CompleteIdlDollar[1].Member.NextStructMember(CompleteIdlDollar[2].Member)
		}
	case 145:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:1410
		{
			CompleteIdllex.InfoAt("memberStar")
			CompleteIdlVAL.Member = nil
		}
	case 147:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1418
		{
			CompleteIdllex.InfoAt("member/type_spec declarators", CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[2].Declarator)
			var err error
			CompleteIdlVAL.Member, err = CompleteIdllex.NewMember(CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[2].Declarator)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 148:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1430
		{
			CompleteIdllex.InfoAt("struct_forward_dcl/RWstruct identifier")
			var err error
			CompleteIdlVAL.struct_def, err = CompleteIdllex.NewStructType(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier.Identifier(), nil, true)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 149:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1442
		{
			CompleteIdlVAL.union_dcl = CompleteIdlDollar[1].union_def
		}
	case 150:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1446
		{
			CompleteIdlVAL.union_dcl = CompleteIdlDollar[1].union_forward_dcl
		}
	case 151:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-9 : CompleteIdlpt+1]
//line completeIdl.y:1452
		{
			CompleteIdllex.Error("implement union_def")
			return 1
		}
	case 165:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1477
		{

		}
	case 166:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1483
		{
			CompleteIdllex.Error("implement union_forward_dcl")
			return 1
		}
	case 167:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:1490
		{
			var err error
			CompleteIdlVAL.enum_dcl, err = scopedObjects.NewEnumType(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[4].Enumerator)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 168:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1500
		{
			CompleteIdlVAL.Enumerator = CompleteIdlDollar[1].Enumerator
			CompleteIdllex.InfoAt("enumerators/enumerator| enumerators ',' enumerator", CompleteIdlDollar[1].Enumerator)
		}
	case 169:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1505
		{
			CompleteIdlVAL.Enumerator = CompleteIdlDollar[1].Enumerator.Last(CompleteIdlDollar[3].Enumerator)
			CompleteIdllex.InfoAt("enumerators/enumerator| enumerators ',' enumerator", CompleteIdlDollar[1].Enumerator, CompleteIdlDollar[3].Enumerator)

		}
	case 170:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1512
		{
			CompleteIdllex.InfoAt("enumerator/identifier", CompleteIdlDollar[1].Identifier)

			var err error
			CompleteIdlVAL.Enumerator, err = scopedObjects.NewEnumerator(CompleteIdlDollar[1].Identifier, CompleteIdlDollar[1].Identifier.Identifier())
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 171:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1525
		{
			CompleteIdllex.InfoAt("array_declarator/identifier fixed_array_sizePlus", CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[2].Declarator)
			var err error
			CompleteIdlVAL.Declarator, err = CompleteIdllex.NewDeclarator(CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[1].ScopedName.Identifier())
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 172:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1537
		{
			CompleteIdllex.InfoAt("fixed_array_size", CompleteIdlDollar[1].IntegerValue)
			CompleteIdlVAL.Declarator = nil
		}
	case 173:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1542
		{
			CompleteIdllex.InfoAt("fixed_array_sizePlus fixed_array_size", CompleteIdlDollar[1].Declarator, CompleteIdlDollar[2].IntegerValue)
			CompleteIdlVAL.Declarator = nil
		}
	case 174:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1548
		{
			CompleteIdllex.InfoAt("'[' positive_int_const ']'", CompleteIdlDollar[2].IntegerValue)
			CompleteIdlVAL.IntegerValue = CompleteIdlDollar[2].IntegerValue

		}
	case 175:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1556
		{
			CompleteIdllex.Error("implement native_dcl")
			return 1
		}
	case 176:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1563
		{
			CompleteIdllex.InfoAt("simple_declaratorPlus/simple_declarator")
			CompleteIdlVAL.ScopedName = scopedObjects.NewScopedName02(CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[1].ScopedName.Identifier())
		}
	case 177:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1568
		{
			CompleteIdllex.InfoAt("simple_declaratorPlus/simple_declaratorPlus ',' simple_declarator")
			CompleteIdlDollar[1].ScopedName.NextScopedName(CompleteIdlDollar[3].ScopedName)
			CompleteIdlVAL.ScopedName = CompleteIdlDollar[1].ScopedName

		}
	case 178:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1577
		{
			CompleteIdlVAL.ScopedName = scopedObjects.NewScopedName02(CompleteIdlDollar[1].Identifier, CompleteIdlDollar[1].Identifier.Identifier())
		}
	case 179:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1583
		{
			CompleteIdllex.InfoAt("typedef_dcl/RWtypedef type_declarator", CompleteIdlDollar[2].TypeDeclarator)
			CompleteIdlVAL.TypeDeclarator = CompleteIdlDollar[2].TypeDeclarator
		}
	case 180:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1591
		{
			CompleteIdllex.InfoAt("type_declarator/simple_type_spec any_declarators", CompleteIdlDollar[1].DeclaredType)
			var err error = nil
			CompleteIdlVAL.TypeDeclarator, err = CompleteIdllex.NewTypeDeclarator(CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[2].Declarator)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 181:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1601
		{
			CompleteIdllex.InfoAt("type_declarator/template_type_spec any_declarators", CompleteIdlDollar[1].DeclaredType)
			var err error = nil
			CompleteIdlVAL.TypeDeclarator, err = CompleteIdllex.NewTypeDeclarator(CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[2].Declarator)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 182:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1611
		{
			CompleteIdllex.InfoAt("type_declarator/constr_type_dcl any_declarators", CompleteIdlDollar[1].TypeSpec)
			var err error = nil
			CompleteIdlVAL.TypeDeclarator, err = CompleteIdllex.NewTypeDeclarator(CompleteIdlDollar[1].TypeSpec, CompleteIdlDollar[2].Declarator)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 183:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1623
		{
			CompleteIdllex.InfoAt("any_declarators/any_declaratorsPlus", CompleteIdlDollar[1].Declarator)
			CompleteIdlVAL.Declarator = CompleteIdlDollar[1].Declarator
		}
	case 184:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1629
		{
			CompleteIdllex.InfoAt("any_declaratorsPlus/any_declarator", CompleteIdlDollar[1].Declarator)
			CompleteIdlVAL.Declarator = CompleteIdlDollar[1].Declarator

		}
	case 185:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1635
		{
			CompleteIdllex.InfoAt("any_declaratorsPlus/any_declaratorsPlus ',' any_declarator", CompleteIdlDollar[1].Declarator, CompleteIdlDollar[3].Declarator)
			CompleteIdlVAL.Declarator = CompleteIdlDollar[1].Declarator.Next(CompleteIdlDollar[3].Declarator)

		}
	case 186:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1644
		{
			CompleteIdllex.InfoAt("declarator/simple_declarator", CompleteIdlDollar[1].ScopedName)
			var err error
			CompleteIdlVAL.Declarator, err = CompleteIdllex.NewDeclarator(CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[1].ScopedName.Identifier())
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 187:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1654
		{

		}
	case 188:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1660
		{
			CompleteIdllex.InfoAt("declaratorPlus", CompleteIdlDollar[1].Declarator)
			CompleteIdlVAL.Declarator = CompleteIdlDollar[1].Declarator
		}
	case 189:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1667
		{
			CompleteIdllex.InfoAt("declarator", CompleteIdlDollar[1].Declarator)
			CompleteIdlVAL.Declarator = CompleteIdlDollar[1].Declarator
		}
	case 190:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1672
		{
			CompleteIdllex.InfoAt("declaratorPlus ',' declarator", CompleteIdlDollar[1].Declarator, CompleteIdlDollar[3].Declarator)
			CompleteIdlVAL.Declarator = CompleteIdlDollar[1].Declarator.Next(CompleteIdlDollar[3].Declarator)
		}
	case 191:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1678
		{
			CompleteIdllex.InfoAt("declarator/simple_declarator", CompleteIdlDollar[1].ScopedName)
			var err error
			CompleteIdlVAL.Declarator, err = CompleteIdllex.NewDeclarator(CompleteIdlDollar[1].ScopedName, CompleteIdlDollar[1].ScopedName.Identifier())
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 192:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1688
		{
			CompleteIdllex.InfoAt("array_declarator", CompleteIdlDollar[1].Declarator)
		}
	case 193:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1696
		{
			CompleteIdllex.InfoAt("")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "any")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 194:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:1708
		{
			CompleteIdllex.InfoAt("RWexception identifier '{' memberStar '}'", CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier)

			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewIdlRwException(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[4].Member)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 195:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1721
		{
			CompleteIdllex.InfoAt("interface_dcl/interface_def", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 196:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1727
		{
			CompleteIdllex.InfoAt("interface_dcl/interface_forward_dcl", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 197:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:1734
		{
			CompleteIdllex.InfoAt("interface_def/interface_header '{' interface_body '}'", CompleteIdlDollar[1].InterfaceHeader, CompleteIdlDollar[3].TypeSpec)
			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdllex.CreateInterfaceDcl(
				CompleteIdlDollar[1].InterfaceHeader,
				CompleteIdlDollar[1].InterfaceHeader.Identifier(),
				false,
				CompleteIdlDollar[1].InterfaceHeader.Abstract(),
				CompleteIdlDollar[1].InterfaceHeader.Local(),
				CompleteIdlDollar[3].TypeSpec)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 198:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1752
		{
			CompleteIdllex.InfoAt("interface_forward_dcl/interface_kind identifier", CompleteIdlDollar[2].Identifier)
			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdllex.CreateInterfaceDcl(
				CompleteIdlDollar[1].InterfaceKind,
				CompleteIdlDollar[2].Identifier.Identifier(),
				true,
				CompleteIdlDollar[1].InterfaceKind.Abstract(),
				CompleteIdlDollar[1].InterfaceKind.Local(),
				nil)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 199:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1770
		{
			CompleteIdllex.InfoAt("interface_header/interface_kind identifier", CompleteIdlDollar[1].InterfaceKind, CompleteIdlDollar[2].Identifier)
			var err error
			CompleteIdlVAL.InterfaceHeader, err = scopedObjects.NewInterfaceHeader(
				CompleteIdlDollar[1].InterfaceKind,
				CompleteIdlDollar[2].Identifier.Identifier(),
				CompleteIdlDollar[1].InterfaceKind.Local(),
				CompleteIdlDollar[1].InterfaceKind.Abstract(),
				nil)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 200:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1787
		{
			CompleteIdllex.InfoAt("interface_header/interface_kind identifier interface_inheritance_spec", CompleteIdlDollar[1].InterfaceKind, CompleteIdlDollar[2].Identifier)
			CompleteIdllex.InfoAt("interface_header/interface_kind identifier", CompleteIdlDollar[1].InterfaceKind, CompleteIdlDollar[2].Identifier, CompleteIdlDollar[3].InterfaceInheritanceSpec)
			var err error
			CompleteIdlVAL.InterfaceHeader, err = scopedObjects.NewInterfaceHeader(
				CompleteIdlDollar[1].InterfaceKind,
				CompleteIdlDollar[2].Identifier.Identifier(),
				CompleteIdlDollar[1].InterfaceKind.Local(),
				CompleteIdlDollar[1].InterfaceKind.Abstract(),
				CompleteIdlDollar[3].InterfaceInheritanceSpec)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}

		}
	case 201:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1806
		{
			CompleteIdllex.InfoAt("interface_kind/RWinterface", CompleteIdlDollar[1].ReservedWord)
			var err error
			CompleteIdlVAL.InterfaceKind, err = CompleteIdllex.CreateInterfaceKind(CompleteIdlDollar[1].ReservedWord, false, false)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 202:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1816
		{
			CompleteIdllex.InfoAt("interface_kind/RWlocal RWinterface", CompleteIdlDollar[1].ReservedWord)
			var err error
			CompleteIdlVAL.InterfaceKind, err = CompleteIdllex.CreateInterfaceKind(CompleteIdlDollar[1].ReservedWord, true, false)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 203:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1826
		{
			CompleteIdllex.InfoAt("interface_kind/RWabstract RWinterface", CompleteIdlDollar[1].ReservedWord)
			var err error
			CompleteIdlVAL.InterfaceKind, err = CompleteIdllex.CreateInterfaceKind(CompleteIdlDollar[1].ReservedWord, false, true)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 204:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1840
		{
			CompleteIdllex.InfoAt("interface_inheritance_spec/':' interface_namePlus")
			var err error
			CompleteIdlVAL.InterfaceInheritanceSpec, err = scopedObjects.NewInterfaceInheritanceSpec()
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 205:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1852
		{
			CompleteIdllex.InfoAt("interface_namePlus/interface_name")
			var err error
			CompleteIdlVAL.InterfaceNamePlus, err = scopedObjects.NewInterfaceNamePlus(CompleteIdlDollar[1].Identifier.Identifier())
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 206:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:1862
		{
			CompleteIdllex.InfoAt("interface_namePlus/interface_namePlus ',' interface_name")
			var err error
			CompleteIdlVAL.InterfaceNamePlus = CompleteIdlDollar[1].InterfaceNamePlus.Next(CompleteIdlDollar[3].Identifier.Identifier())
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 207:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1873
		{
			CompleteIdllex.InfoAt("interface_name/scoped_name")
			CompleteIdlVAL.Identifier = CompleteIdlDollar[1].ScopedName
		}
	case 208:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1880
		{
			CompleteIdllex.InfoAt("interface_body/exportStar")
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 209:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:1884
		{

		}
	case 210:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:1889
		{
			CompleteIdllex.InfoAt("exportStar")
			CompleteIdlVAL.TypeSpec = nil
		}
	case 211:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1894
		{
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 212:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1899
		{
			CompleteIdllex.InfoAt("exportPlus/exportPlus export", CompleteIdlDollar[1].TypeSpec, CompleteIdlDollar[2].TypeSpec)
			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdlDollar[1].TypeSpec, CompleteIdlDollar[1].TypeSpec.SetNextTypeSpec(CompleteIdlDollar[2].TypeSpec)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 213:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:1908
		{
			CompleteIdllex.InfoAt("exportPlus/export", CompleteIdlDollar[1].TypeSpec)
			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdlDollar[1].TypeSpec, nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 214:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1920
		{
			CompleteIdllex.InfoAt("export/op_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 215:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1925
		{
			CompleteIdllex.InfoAt("export/attr_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 216:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1930
		{
			CompleteIdllex.InfoAt("export/type_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 217:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1935
		{
			CompleteIdllex.InfoAt("export/const_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 218:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1940
		{
			CompleteIdllex.InfoAt("export/except_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 219:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1945
		{
			CompleteIdllex.InfoAt("export/type_id_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 220:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1950
		{
			CompleteIdllex.InfoAt("export/type_prefix_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 221:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1955
		{
			CompleteIdllex.InfoAt("export/import_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 222:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1960
		{
			CompleteIdllex.InfoAt("export/op_oneway_dcl ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 223:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:1965
		{
			CompleteIdllex.InfoAt("export/op_with_context ';'", CompleteIdlDollar[1].TypeSpec)
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 224:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:1973
		{
			CompleteIdllex.InfoAt("op_dcl/op_type_spec identifier '('  ')'", CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[2].Identifier)
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewOperationDeclarations(CompleteIdlDollar[2].Identifier, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[1].DeclaredType, nil, nil), nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 225:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:1983
		{
			CompleteIdllex.InfoAt("op_dcl/op_type_spec identifier '('  ')'  raises_expr", CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[2].Identifier, CompleteIdlDollar[5].Identifier)
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewOperationDeclarations(CompleteIdlDollar[2].Identifier, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[1].DeclaredType, nil, CompleteIdlDollar[5].Identifier), nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 226:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:1993
		{
			CompleteIdllex.InfoAt("op_dcl/op_type_spec identifier '('  parameter_dcls ')'", CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[2].Identifier, CompleteIdlDollar[4].parameter_dcls)
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewOperationDeclarations(CompleteIdlDollar[2].Identifier, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[4].parameter_dcls, nil), nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 227:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2003
		{
			CompleteIdllex.InfoAt("op_dcl/op_type_spec identifier '('  parameter_dcls ')'  raises_expr", CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[2].Identifier, CompleteIdlDollar[4].parameter_dcls, CompleteIdlDollar[6].Identifier)
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewOperationDeclarations(CompleteIdlDollar[2].Identifier, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[1].DeclaredType, CompleteIdlDollar[4].parameter_dcls, CompleteIdlDollar[6].Identifier), nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 228:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2015
		{
			CompleteIdlVAL.DeclaredType = CompleteIdlDollar[1].DeclaredType
		}
	case 229:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2018
		{
			CompleteIdllex.InfoAt("op_type_spec/RWvoid")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "void")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 230:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2030
		{
			CompleteIdlVAL.parameter_dcls = CompleteIdlDollar[1].parameter_dcls
		}
	case 231:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2035
		{
			CompleteIdllex.InfoAt("param_dclPlus/param_dcl")
			CompleteIdlVAL.parameter_dcls = CompleteIdlDollar[1].parameter_dcls
		}
	case 232:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2040
		{
			CompleteIdllex.InfoAt("param_dclPlus/param_dclPlus ',' param_dcl")
			CompleteIdlVAL.parameter_dcls = CompleteIdlDollar[1].parameter_dcls.NextParameterDeclarations(CompleteIdlDollar[3].parameter_dcls)
		}
	case 233:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2046
		{
			CompleteIdllex.InfoAt("param_dcl/param_attribute type_spec simple_declarator")
			var err error
			CompleteIdlVAL.parameter_dcls, err = scopedObjects.NewParameterDeclarations(CompleteIdlDollar[3].ScopedName, CompleteIdlDollar[1].ParamAttribute.In(), CompleteIdlDollar[1].ParamAttribute.Out(), CompleteIdlDollar[3].ScopedName.Identifier(), CompleteIdlDollar[2].DeclaredType), nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 234:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2058
		{
			CompleteIdllex.InfoAt("param_attribute/RWin")
			CompleteIdlVAL.ParamAttribute = scopedObjects.NewParamAttribute(CompleteIdlDollar[1].ReservedWord, true, false)
		}
	case 235:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2063
		{
			CompleteIdllex.InfoAt("param_attribute/RWout")
			CompleteIdlVAL.ParamAttribute = scopedObjects.NewParamAttribute(CompleteIdlDollar[1].ReservedWord, false, true)
		}
	case 236:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2068
		{
			CompleteIdllex.InfoAt("param_attribute/RWinout")
			CompleteIdlVAL.ParamAttribute = scopedObjects.NewParamAttribute(CompleteIdlDollar[1].ReservedWord, true, true)
		}
	case 237:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2075
		{
			CompleteIdllex.InfoAt("raises_expr/RWraises '(' scoped_namePlus ')'", CompleteIdlDollar[3].ScopedName)
		}
	case 238:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2081
		{
			CompleteIdllex.InfoAt("attr_dcl/readonly_attr_spec")
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 239:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2086
		{
			CompleteIdllex.InfoAt("attr_dcl/attr_spec")
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 240:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2093
		{
			CompleteIdllex.InfoAt("readonly_attr_spec/RWreadonly RWattribute type_spec readonly_attr_declarator")
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewAttributeDcl(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[4].AttrDeclarator, CompleteIdlDollar[3].DeclaredType, true)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 241:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2105
		{
			CompleteIdllex.InfoAt("readonly_attr_declarator/simple_declarator raises_expr")
			var err error
			CompleteIdlVAL.AttrDeclarator, err = scopedObjects.NewAttrDeclarator(CompleteIdlDollar[1].ScopedName)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 242:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2115
		{
			CompleteIdllex.InfoAt("readonly_attr_declarator/simple_declaratorPlus")
			var err error
			CompleteIdlVAL.AttrDeclarator, err = scopedObjects.NewAttrDeclarator(CompleteIdlDollar[1].ScopedName)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 243:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2127
		{
			CompleteIdllex.InfoAt("attr_spec/RWattribute type_spec attr_declarator")
			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewAttributeDcl(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[3].AttrDeclarator, CompleteIdlDollar[2].DeclaredType, false)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 244:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2139
		{
			CompleteIdllex.InfoAt("attr_declarator/simple_declarator attr_raises_expr")
			var err error
			CompleteIdlVAL.AttrDeclarator, err = scopedObjects.NewAttrDeclarator(CompleteIdlDollar[1].ScopedName)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 245:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2149
		{
			CompleteIdllex.InfoAt("attr_declarator/simple_declarator attr_raises_expr")
			var err error
			CompleteIdlVAL.AttrDeclarator, err = scopedObjects.NewAttrDeclarator(CompleteIdlDollar[1].ScopedName)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 246:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2161
		{
			CompleteIdllex.InfoAt("")
		}
	case 247:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2165
		{
			CompleteIdllex.InfoAt("")
		}
	case 248:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2169
		{
			CompleteIdllex.InfoAt("")
		}
	case 249:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2175
		{
			CompleteIdllex.InfoAt("")
		}
	case 250:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2181
		{
			CompleteIdllex.InfoAt("")
		}
	case 251:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2187
		{
			CompleteIdllex.InfoAt("")
		}
	case 252:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2193
		{
			CompleteIdllex.InfoAt("value_dcl/value_def")
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 253:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2198
		{
			CompleteIdllex.InfoAt("value_dcl/value_forward_dcl")
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 254:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2203
		{
			CompleteIdllex.InfoAt("value_dcl/value_box_def")
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 255:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2208
		{
			CompleteIdllex.InfoAt("value_dcl/value_abs_def")
			CompleteIdlVAL.TypeSpec = CompleteIdlDollar[1].TypeSpec
		}
	case 256:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2215
		{
			CompleteIdllex.InfoAt("value_header '{' value_elementPlus '}'")
		}
	case 257:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2221
		{
			CompleteIdllex.InfoAt("value_header/value_kind identifier value_inheritance_spec")
			var err error
			CompleteIdlVAL.IdlValueHeader, err = scopedObjects.NewIdlValueHeader(CompleteIdlDollar[1].value_kind, CompleteIdlDollar[1].value_kind, CompleteIdlDollar[2].Identifier, CompleteIdlDollar[3].ValueInheritanceSpec)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 258:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2231
		{
			CompleteIdllex.InfoAt("value_header/value_kind identifier")
			var err error
			CompleteIdlVAL.IdlValueHeader, err = scopedObjects.NewIdlValueHeader(CompleteIdlDollar[1].value_kind, CompleteIdlDollar[1].value_kind, CompleteIdlDollar[2].Identifier, nil)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 259:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2243
		{
			CompleteIdllex.InfoAt("value_kind/RWvaluetype")
			var err error
			CompleteIdlVAL.value_kind, err = scopedObjects.NewIdlValueKind(CompleteIdlDollar[1].ReservedWord, false)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 260:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2253
		{
			CompleteIdllex.InfoAt("value_kind/RWcustom RWvaluetype")
			var err error
			CompleteIdlVAL.value_kind, err = scopedObjects.NewIdlValueKind(CompleteIdlDollar[1].ReservedWord, true)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 261:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:2265
		{
			CompleteIdllex.InfoAt("value_inheritance_spec")
			var err error
			CompleteIdlVAL.ValueInheritanceSpec, err = nil, nil
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 262:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2275
		{
			CompleteIdllex.InfoAt("value_inheritance_spec/RWsupports interface_name")
			var err error
			CompleteIdlVAL.ValueInheritanceSpec, err = scopedObjects.NewValueInheritanceSpec(CompleteIdlDollar[1].ReservedWord)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 263:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2285
		{
			CompleteIdllex.InfoAt("value_inheritance_spec/':' value_name")
			var err error
			CompleteIdlVAL.ValueInheritanceSpec, err = scopedObjects.NewValueInheritanceSpec(CompleteIdlDollar[2].Identifier)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 264:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2295
		{
			CompleteIdllex.InfoAt("value_inheritance_spec/':' value_name  RWsupports interface_name")
			var err error
			CompleteIdlVAL.ValueInheritanceSpec, err = scopedObjects.NewValueInheritanceSpec(CompleteIdlDollar[2].Identifier)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 265:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2305
		{
			CompleteIdllex.InfoAt("value_inheritance_spec/':' value_namePlus")
			var err error
			CompleteIdlVAL.ValueInheritanceSpec, err = scopedObjects.NewValueInheritanceSpec(CompleteIdlDollar[2].Identifier)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 266:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2315
		{
			CompleteIdllex.InfoAt("value_inheritance_spec/':' value_namePlus RWsupports interface_namePlus")
			var err error
			CompleteIdlVAL.ValueInheritanceSpec, err = scopedObjects.NewValueInheritanceSpec(CompleteIdlDollar[2].Identifier)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 267:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2325
		{
			CompleteIdllex.InfoAt("value_inheritance_spec/':' RWtruncatable value_namePlus")
			var err error
			CompleteIdlVAL.ValueInheritanceSpec, err = scopedObjects.NewValueInheritanceSpec(CompleteIdlDollar[2].ReservedWord)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 268:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2335
		{
			CompleteIdllex.InfoAt("value_inheritance_spec/':' RWtruncatable value_namePlus  RWsupports interface_namePlus")
			var err error
			CompleteIdlVAL.ValueInheritanceSpec, err = scopedObjects.NewValueInheritanceSpec(CompleteIdlDollar[2].ReservedWord)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 269:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2348
		{
			CompleteIdllex.InfoAt("value_namePlus/value_name")
			CompleteIdlVAL.Identifier = CompleteIdlDollar[1].Identifier
		}
	case 270:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2353
		{
			CompleteIdllex.InfoAt("value_namePlus/value_namePlus ',' value_name")
			CompleteIdlVAL.Identifier = CompleteIdlDollar[1].Identifier
		}
	case 271:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2359
		{
			CompleteIdllex.InfoAt("value_name/scoped_name")
			CompleteIdlVAL.Identifier = CompleteIdlDollar[1].ScopedName
		}
	case 272:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:2365
		{
			CompleteIdllex.InfoAt("")
		}
	case 273:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:2369
		{
			CompleteIdllex.InfoAt("")
		}
	case 274:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2374
		{
			CompleteIdllex.InfoAt("")
		}
	case 275:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2378
		{
			CompleteIdllex.InfoAt("")
		}
	case 276:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2382
		{
			CompleteIdllex.InfoAt("")
		}
	case 277:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2388
		{
			CompleteIdllex.InfoAt("")
		}
	case 278:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2392
		{
			CompleteIdllex.InfoAt("")
		}
	case 279:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2398
		{
			CompleteIdllex.InfoAt("")
		}
	case 280:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2402
		{
			CompleteIdllex.InfoAt("")
		}
	case 281:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2406
		{
			CompleteIdllex.InfoAt("")
		}
	case 282:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-7 : CompleteIdlpt+1]
//line completeIdl.y:2410
		{
			CompleteIdllex.InfoAt("")
		}
	case 283:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2416
		{
			CompleteIdllex.InfoAt("")
		}
	case 284:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2422
		{
			CompleteIdllex.InfoAt("")
		}
	case 285:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2426
		{
			CompleteIdllex.InfoAt("")
		}
	case 286:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2431
		{
			CompleteIdllex.InfoAt("")
		}
	case 287:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2437
		{
			CompleteIdllex.InfoAt("value_forward_dcl/value_kind identifier")

			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewIdlvalue_forward_dcl(CompleteIdlDollar[1].value_kind, CompleteIdlDollar[2].Identifier.Identifier(), CompleteIdlDollar[1].value_kind.GetFileName(), CompleteIdlDollar[1].value_kind.GetRow(), CompleteIdlDollar[1].value_kind.GetCol())
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}

		}
	case 288:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2450
		{
		}
	case 289:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2454
		{
			CompleteIdllex.InfoAt("type_prefix_dcl/RWtypeprefix scoped_name string_literal", CompleteIdlDollar[2].ScopedName, CompleteIdlDollar[3].StringValue)
			var err error
			CompleteIdlVAL.TypeSpec, err = CompleteIdllex.CreateTypePrefixDcl(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[2].ScopedName.Identifier(), CompleteIdlDollar[3].StringValue)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 290:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2464
		{
		}
	case 291:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2466
		{
		}
	case 292:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2466
		{
		}
	case 293:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2470
		{
			CompleteIdllex.InfoAt("")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "Object")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 294:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2480
		{
		}
	case 295:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:2483
		{
			CompleteIdllex.InfoAt("")
		}
	case 296:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2487
		{
			CompleteIdllex.InfoAt("")
		}
	case 297:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2491
		{
			CompleteIdllex.InfoAt("")
		}
	case 298:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2496
		{
			CompleteIdllex.InfoAt("")
		}
	case 299:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2502
		{
			CompleteIdllex.InfoAt("")
		}
	case 300:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2506
		{
			CompleteIdllex.InfoAt("")
		}
	case 301:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2511
		{
			CompleteIdllex.InfoAt("")
		}
	case 302:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2517
		{
			CompleteIdllex.InfoAt("")
		}
	case 303:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2521
		{
			CompleteIdllex.InfoAt("")
		}
	case 304:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2527
		{
			CompleteIdllex.InfoAt("")
		}
	case 305:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2531
		{
			CompleteIdllex.InfoAt("")
		}
	case 306:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2536
		{
			CompleteIdllex.InfoAt("")
		}
	case 307:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2542
		{
			CompleteIdllex.InfoAt("")
		}
	case 308:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2548
		{
			CompleteIdllex.InfoAt("value_abs_def/RWabstract   identifier", CompleteIdlDollar[3].Identifier, true)

			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewIdlValueAbsoluteDefinition(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[3].Identifier.Identifier(), nil, scopedObjects.VADAbstract|scopedObjects.VADForward)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 309:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-7 : CompleteIdlpt+1]
//line completeIdl.y:2559
		{
			CompleteIdllex.InfoAt("value_abs_def/RWabstract RWvaluetype identifier  value_inheritance_spec  '{' exportStar '}'")

			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewIdlValueAbsoluteDefinition(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[3].Identifier.Identifier(), CompleteIdlDollar[6].TypeSpec, scopedObjects.VADAbstract)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 310:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2570
		{
			CompleteIdllex.InfoAt("value_abs_def/RWabstract RWvaluetype identifier '{' exportStar '}'")

			var err error
			CompleteIdlVAL.TypeSpec, err = scopedObjects.NewIdlValueAbsoluteDefinition(CompleteIdlDollar[1].ReservedWord, CompleteIdlDollar[3].Identifier.Identifier(), CompleteIdlDollar[5].TypeSpec, scopedObjects.VADAbstract)
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 311:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2583
		{
			CompleteIdllex.InfoAt("value_base_type/RWValueBase")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "valuebase")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 312:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2595
		{
			CompleteIdllex.InfoAt("")
		}
	case 313:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2599
		{
			CompleteIdllex.InfoAt("")
		}
	case 314:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2605
		{
			CompleteIdllex.InfoAt("")
		}
	case 315:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2611
		{
			CompleteIdllex.InfoAt("")
		}
	case 316:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2618
		{
			CompleteIdllex.InfoAt("")
		}
	case 317:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2622
		{
			CompleteIdllex.InfoAt("")
		}
	case 318:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2626
		{
			CompleteIdllex.InfoAt("")
		}
	case 319:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2630
		{
			CompleteIdllex.InfoAt("")
		}
	case 320:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2637
		{
			CompleteIdllex.InfoAt("")
		}
	case 321:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2643
		{
			CompleteIdllex.InfoAt("")
		}
	case 322:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:2648
		{
			CompleteIdllex.InfoAt("")
		}
	case 323:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2652
		{
			CompleteIdllex.InfoAt("")
		}
	case 324:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2656
		{
			CompleteIdllex.InfoAt("")
		}
	case 325:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2661
		{
			CompleteIdllex.InfoAt("")
		}
	case 326:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2665
		{
			CompleteIdllex.InfoAt("")
		}
	case 327:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2669
		{
			CompleteIdllex.InfoAt("")
		}
	case 328:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2673
		{
			CompleteIdllex.InfoAt("")
		}
	case 329:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2677
		{
			CompleteIdllex.InfoAt("")
		}
	case 330:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2681
		{
			CompleteIdllex.InfoAt("")
		}
	case 331:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2685
		{
			CompleteIdllex.InfoAt("")
		}
	case 332:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2692
		{
			CompleteIdllex.InfoAt("")
		}
	case 333:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2698
		{
			CompleteIdllex.InfoAt("")
		}
	case 334:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2702
		{
			CompleteIdllex.InfoAt("")
		}
	case 335:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2709
		{
			CompleteIdllex.InfoAt("")
		}
	case 336:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2713
		{
			CompleteIdllex.InfoAt("")
		}
	case 337:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2720
		{
			CompleteIdllex.InfoAt("")
		}
	case 338:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2726
		{
			CompleteIdllex.InfoAt("")
		}
	case 339:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2730
		{
			CompleteIdllex.InfoAt("")
		}
	case 340:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2734
		{
			CompleteIdllex.InfoAt("")
		}
	case 341:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2738
		{
			CompleteIdllex.InfoAt("")
		}
	case 342:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2742
		{
			CompleteIdllex.InfoAt("")
		}
	case 343:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2746
		{
			CompleteIdllex.InfoAt("")
		}
	case 344:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2750
		{
			CompleteIdllex.InfoAt("")
		}
	case 345:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2754
		{
			CompleteIdllex.InfoAt("")
		}
	case 346:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2758
		{
			CompleteIdllex.InfoAt("")
		}
	case 347:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-7 : CompleteIdlpt+1]
//line completeIdl.y:2762
		{
			CompleteIdllex.InfoAt("")
		}
	case 348:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2770
		{
			CompleteIdllex.InfoAt("")
		}
	case 349:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2776
		{
			CompleteIdllex.InfoAt("")
		}
	case 350:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:2781
		{
			CompleteIdllex.InfoAt("")
		}
	case 351:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2785
		{
			CompleteIdllex.InfoAt("")
		}
	case 352:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2789
		{
			CompleteIdllex.InfoAt("")
		}
	case 353:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2794
		{
			CompleteIdllex.InfoAt("")
		}
	case 354:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2798
		{
			CompleteIdllex.InfoAt("")
		}
	case 355:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2802
		{
			CompleteIdllex.InfoAt("")
		}
	case 356:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2809
		{
			CompleteIdllex.InfoAt("")
		}
	case 357:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2813
		{
			CompleteIdllex.InfoAt("")
		}
	case 358:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2817
		{
			CompleteIdllex.InfoAt("")
		}
	case 359:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2821
		{
			CompleteIdllex.InfoAt("")
		}
	case 360:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2828
		{
			CompleteIdllex.InfoAt("")
		}
	case 361:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2834
		{
			CompleteIdllex.InfoAt("")
		}
	case 362:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2838
		{
			CompleteIdllex.InfoAt("")
		}
	case 363:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2843
		{
			CompleteIdllex.InfoAt("")
		}
	case 364:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2849
		{
			CompleteIdllex.InfoAt("")
		}
	case 365:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2855
		{
			CompleteIdllex.InfoAt("")
		}
	case 366:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2861
		{
			CompleteIdllex.InfoAt("")
		}
	case 367:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2867
		{
			CompleteIdllex.InfoAt("")
		}
	case 368:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2873
		{
			CompleteIdllex.InfoAt("")
		}
	case 369:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2879
		{
			CompleteIdllex.InfoAt("")
		}
	case 370:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2883
		{
			CompleteIdllex.InfoAt("")
		}
	case 371:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2887
		{
			CompleteIdllex.InfoAt("")
		}
	case 372:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2891
		{
			CompleteIdllex.InfoAt("")
		}
	case 373:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:2896
		{
			CompleteIdllex.InfoAt("")
		}
	case 374:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2900
		{
			CompleteIdllex.InfoAt("")
		}
	case 375:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2904
		{
			CompleteIdllex.InfoAt("")
		}
	case 376:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2908
		{
			CompleteIdllex.InfoAt("")
		}
	case 377:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2914
		{
			CompleteIdllex.InfoAt("")
		}
	case 378:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2918
		{
			CompleteIdllex.InfoAt("")
		}
	case 379:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:2924
		{
			CompleteIdllex.InfoAt("")
		}
	case 380:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-7 : CompleteIdlpt+1]
//line completeIdl.y:2928
		{
			CompleteIdllex.InfoAt("")
		}
	case 381:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2934
		{
			CompleteIdllex.InfoAt("")
		}
	case 382:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2940
		{
			CompleteIdllex.InfoAt("")
		}
	case 383:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2944
		{
			CompleteIdllex.InfoAt("")
		}
	case 384:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:2948
		{
			CompleteIdllex.InfoAt("")
		}
	case 385:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:2952
		{
			CompleteIdllex.InfoAt("")
		}
	case 386:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2958
		{
			CompleteIdllex.InfoAt("")
		}
	case 387:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2962
		{
			CompleteIdllex.InfoAt("")
		}
	case 388:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2968
		{
			CompleteIdllex.InfoAt("")
		}
	case 389:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:2974
		{
			CompleteIdllex.InfoAt("")
		}
	case 390:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2978
		{
		}
	case 391:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2981
		{
		}
	case 392:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2982
		{
		}
	case 393:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2983
		{
		}
	case 394:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:2986
		{
			CompleteIdllex.InfoAt("")
		}
	case 395:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:2991
		{
			CompleteIdllex.InfoAt("")
		}
	case 396:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:2995
		{
			CompleteIdllex.InfoAt("")
		}
	case 397:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3001
		{
			CompleteIdllex.InfoAt("")
		}
	case 398:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3005
		{
			CompleteIdllex.InfoAt("")
		}
	case 399:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:3009
		{
		}
	case 400:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:3012
		{
		}
	case 401:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3013
		{
		}
	case 402:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:3015
		{
		}
	case 403:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:3017
		{
		}
	case 404:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3018
		{
		}
	case 405:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:3018
		{
		}
	case 406:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-8 : CompleteIdlpt+1]
//line completeIdl.y:3020
		{
		}
	case 407:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3022
		{
		}
	case 408:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3025
		{
		}
	case 409:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3026
		{
		}
	case 425:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:3035
		{
		}
	case 426:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3037
		{
		}
	case 427:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3039
		{
		}
	case 428:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3039
		{
		}
	case 429:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3040
		{
		}
	case 430:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3040
		{
		}
	case 431:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:3042
		{
		}
	case 432:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3044
		{
		}
	case 433:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3044
		{
		}
	case 434:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3045
		{
		}
	case 435:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-8 : CompleteIdlpt+1]
//line completeIdl.y:3049
		{

		}
	case 436:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-6 : CompleteIdlpt+1]
//line completeIdl.y:3052
		{

		}
	case 437:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:3058
		{
			CompleteIdllex.Error("implement bitset_dcl1")
			return 1
		}
	case 438:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-13 : CompleteIdlpt+1]
//line completeIdl.y:3063
		{
			CompleteIdllex.Error("implement bitset_dcl2")
			return 1
		}
	case 447:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:3078
		{
			CompleteIdllex.Error("implement bitmask_dcl")
			return 1
		}
	case 450:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3087
		{
			CompleteIdllex.InfoAt("")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "int8")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 451:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3098
		{
			CompleteIdllex.InfoAt("")
			var err error
			CompleteIdlVAL.DeclaredType, err = CompleteIdllex.FindPrimitive(CompleteIdlDollar[1].ReservedWord, "uint8")
			if err != nil {
				CompleteIdllex.Error(err.Error())
				return 1
			}
		}
	case 452:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-4 : CompleteIdlpt+1]
//line completeIdl.y:3110
		{
		}
	case 453:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:3112
		{
		}
	case 454:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3115
		{
		}
	case 455:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:3116
		{
		}
	case 456:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:3117
		{
		}
	case 457:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:3118
		{
		}
	case 458:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-0 : CompleteIdlpt+1]
//line completeIdl.y:3120
		{
		}
	case 459:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3121
		{
		}
	case 460:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3124
		{
		}
	case 461:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:3125
		{
		}
	case 462:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3127
		{
		}
	case 463:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3127
		{
		}
	case 464:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3127
		{
		}
	case 465:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3131
		{
		}
	case 466:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-2 : CompleteIdlpt+1]
//line completeIdl.y:3135
		{
		}
	case 467:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-5 : CompleteIdlpt+1]
//line completeIdl.y:3136
		{
		}
	case 468:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3139
		{
		}
	case 469:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3140
		{
		}
	case 470:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-1 : CompleteIdlpt+1]
//line completeIdl.y:3143
		{
		}
	case 471:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3144
		{
		}
	case 472:
		CompleteIdlDollar = CompleteIdlS[CompleteIdlpt-3 : CompleteIdlpt+1]
//line completeIdl.y:3145
		{
		}
	}
	goto CompleteIdlstack /* stack new state and value */
}
